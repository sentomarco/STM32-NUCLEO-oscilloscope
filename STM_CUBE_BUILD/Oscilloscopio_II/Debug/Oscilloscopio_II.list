
Oscilloscopio_II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073bc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007558  08007558  00017558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075c8  080075c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080075d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000078  08007648  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007648  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120c9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002726  00000000  00000000  00032171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00034898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d68  00000000  00000000  00035718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017937  00000000  00000000  00036480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f750  00000000  00000000  0004ddb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091845  00000000  00000000  0005d507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eed4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004088  00000000  00000000  000eeda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800753c 	.word	0x0800753c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	0800753c 	.word	0x0800753c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f000 b96e 	b.w	8000ed4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	9d08      	ldr	r5, [sp, #32]
 8000c16:	4604      	mov	r4, r0
 8000c18:	468c      	mov	ip, r1
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f040 8083 	bne.w	8000d26 <__udivmoddi4+0x116>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d947      	bls.n	8000cb6 <__udivmoddi4+0xa6>
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	b142      	cbz	r2, 8000c3e <__udivmoddi4+0x2e>
 8000c2c:	f1c2 0020 	rsb	r0, r2, #32
 8000c30:	fa24 f000 	lsr.w	r0, r4, r0
 8000c34:	4091      	lsls	r1, r2
 8000c36:	4097      	lsls	r7, r2
 8000c38:	ea40 0c01 	orr.w	ip, r0, r1
 8000c3c:	4094      	lsls	r4, r2
 8000c3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fbbc f6f8 	udiv	r6, ip, r8
 8000c48:	fa1f fe87 	uxth.w	lr, r7
 8000c4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c54:	fb06 f10e 	mul.w	r1, r6, lr
 8000c58:	4299      	cmp	r1, r3
 8000c5a:	d909      	bls.n	8000c70 <__udivmoddi4+0x60>
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c62:	f080 8119 	bcs.w	8000e98 <__udivmoddi4+0x288>
 8000c66:	4299      	cmp	r1, r3
 8000c68:	f240 8116 	bls.w	8000e98 <__udivmoddi4+0x288>
 8000c6c:	3e02      	subs	r6, #2
 8000c6e:	443b      	add	r3, r7
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c78:	fb08 3310 	mls	r3, r8, r0, r3
 8000c7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x8c>
 8000c88:	193c      	adds	r4, r7, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c8e:	f080 8105 	bcs.w	8000e9c <__udivmoddi4+0x28c>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f240 8102 	bls.w	8000e9c <__udivmoddi4+0x28c>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	443c      	add	r4, r7
 8000c9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca0:	eba4 040e 	sub.w	r4, r4, lr
 8000ca4:	2600      	movs	r6, #0
 8000ca6:	b11d      	cbz	r5, 8000cb0 <__udivmoddi4+0xa0>
 8000ca8:	40d4      	lsrs	r4, r2
 8000caa:	2300      	movs	r3, #0
 8000cac:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	b902      	cbnz	r2, 8000cba <__udivmoddi4+0xaa>
 8000cb8:	deff      	udf	#255	; 0xff
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	d150      	bne.n	8000d64 <__udivmoddi4+0x154>
 8000cc2:	1bcb      	subs	r3, r1, r7
 8000cc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc8:	fa1f f887 	uxth.w	r8, r7
 8000ccc:	2601      	movs	r6, #1
 8000cce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cd2:	0c21      	lsrs	r1, r4, #16
 8000cd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0xe4>
 8000ce4:	1879      	adds	r1, r7, r1
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0xe2>
 8000cec:	428b      	cmp	r3, r1
 8000cee:	f200 80e9 	bhi.w	8000ec4 <__udivmoddi4+0x2b4>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1ac9      	subs	r1, r1, r3
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x10c>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x10a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80d9 	bhi.w	8000ecc <__udivmoddi4+0x2bc>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e7bf      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0x12e>
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	f000 80b1 	beq.w	8000e92 <__udivmoddi4+0x282>
 8000d30:	2600      	movs	r6, #0
 8000d32:	e9c5 0100 	strd	r0, r1, [r5]
 8000d36:	4630      	mov	r0, r6
 8000d38:	4631      	mov	r1, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	fab3 f683 	clz	r6, r3
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	d14a      	bne.n	8000ddc <__udivmoddi4+0x1cc>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0x140>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 80b8 	bhi.w	8000ec0 <__udivmoddi4+0x2b0>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb61 0103 	sbc.w	r1, r1, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	468c      	mov	ip, r1
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0a8      	beq.n	8000cb0 <__udivmoddi4+0xa0>
 8000d5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d64:	f1c2 0320 	rsb	r3, r2, #32
 8000d68:	fa20 f603 	lsr.w	r6, r0, r3
 8000d6c:	4097      	lsls	r7, r2
 8000d6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d76:	40d9      	lsrs	r1, r3
 8000d78:	4330      	orrs	r0, r6
 8000d7a:	0c03      	lsrs	r3, r0, #16
 8000d7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d80:	fa1f f887 	uxth.w	r8, r7
 8000d84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8c:	fb06 f108 	mul.w	r1, r6, r8
 8000d90:	4299      	cmp	r1, r3
 8000d92:	fa04 f402 	lsl.w	r4, r4, r2
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x19c>
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d9e:	f080 808d 	bcs.w	8000ebc <__udivmoddi4+0x2ac>
 8000da2:	4299      	cmp	r1, r3
 8000da4:	f240 808a 	bls.w	8000ebc <__udivmoddi4+0x2ac>
 8000da8:	3e02      	subs	r6, #2
 8000daa:	443b      	add	r3, r7
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	b281      	uxth	r1, r0
 8000db0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb00 f308 	mul.w	r3, r0, r8
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d907      	bls.n	8000dd4 <__udivmoddi4+0x1c4>
 8000dc4:	1879      	adds	r1, r7, r1
 8000dc6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000dca:	d273      	bcs.n	8000eb4 <__udivmoddi4+0x2a4>
 8000dcc:	428b      	cmp	r3, r1
 8000dce:	d971      	bls.n	8000eb4 <__udivmoddi4+0x2a4>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4439      	add	r1, r7
 8000dd4:	1acb      	subs	r3, r1, r3
 8000dd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000dda:	e778      	b.n	8000cce <__udivmoddi4+0xbe>
 8000ddc:	f1c6 0c20 	rsb	ip, r6, #32
 8000de0:	fa03 f406 	lsl.w	r4, r3, r6
 8000de4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000de8:	431c      	orrs	r4, r3
 8000dea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dee:	fa01 f306 	lsl.w	r3, r1, r6
 8000df2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000df6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dfa:	431f      	orrs	r7, r3
 8000dfc:	0c3b      	lsrs	r3, r7, #16
 8000dfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e02:	fa1f f884 	uxth.w	r8, r4
 8000e06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000e12:	458a      	cmp	sl, r1
 8000e14:	fa02 f206 	lsl.w	r2, r2, r6
 8000e18:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x220>
 8000e1e:	1861      	adds	r1, r4, r1
 8000e20:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e24:	d248      	bcs.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e26:	458a      	cmp	sl, r1
 8000e28:	d946      	bls.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2e:	4421      	add	r1, r4
 8000e30:	eba1 010a 	sub.w	r1, r1, sl
 8000e34:	b2bf      	uxth	r7, r7
 8000e36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e42:	fb00 f808 	mul.w	r8, r0, r8
 8000e46:	45b8      	cmp	r8, r7
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x24a>
 8000e4a:	19e7      	adds	r7, r4, r7
 8000e4c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e50:	d22e      	bcs.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e52:	45b8      	cmp	r8, r7
 8000e54:	d92c      	bls.n	8000eb0 <__udivmoddi4+0x2a0>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4427      	add	r7, r4
 8000e5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5e:	eba7 0708 	sub.w	r7, r7, r8
 8000e62:	fba0 8902 	umull	r8, r9, r0, r2
 8000e66:	454f      	cmp	r7, r9
 8000e68:	46c6      	mov	lr, r8
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	d31a      	bcc.n	8000ea4 <__udivmoddi4+0x294>
 8000e6e:	d017      	beq.n	8000ea0 <__udivmoddi4+0x290>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x27a>
 8000e72:	ebb3 020e 	subs.w	r2, r3, lr
 8000e76:	eb67 0701 	sbc.w	r7, r7, r1
 8000e7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e7e:	40f2      	lsrs	r2, r6
 8000e80:	ea4c 0202 	orr.w	r2, ip, r2
 8000e84:	40f7      	lsrs	r7, r6
 8000e86:	e9c5 2700 	strd	r2, r7, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	462e      	mov	r6, r5
 8000e94:	4628      	mov	r0, r5
 8000e96:	e70b      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000e98:	4606      	mov	r6, r0
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fd      	b.n	8000c9c <__udivmoddi4+0x8c>
 8000ea0:	4543      	cmp	r3, r8
 8000ea2:	d2e5      	bcs.n	8000e70 <__udivmoddi4+0x260>
 8000ea4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ea8:	eb69 0104 	sbc.w	r1, r9, r4
 8000eac:	3801      	subs	r0, #1
 8000eae:	e7df      	b.n	8000e70 <__udivmoddi4+0x260>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e7d2      	b.n	8000e5a <__udivmoddi4+0x24a>
 8000eb4:	4660      	mov	r0, ip
 8000eb6:	e78d      	b.n	8000dd4 <__udivmoddi4+0x1c4>
 8000eb8:	4681      	mov	r9, r0
 8000eba:	e7b9      	b.n	8000e30 <__udivmoddi4+0x220>
 8000ebc:	4666      	mov	r6, ip
 8000ebe:	e775      	b.n	8000dac <__udivmoddi4+0x19c>
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e74a      	b.n	8000d5a <__udivmoddi4+0x14a>
 8000ec4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ec8:	4439      	add	r1, r7
 8000eca:	e713      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	443c      	add	r4, r7
 8000ed0:	e724      	b.n	8000d1c <__udivmoddi4+0x10c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <SetSamplePeriod>:
static volatile int  conv_count=0; //elapsed time
static volatile int  TTTime=0; //Trigger Type setup time
static volatile uint8_t trigger_type=0, TL=205;	//TL= HIGH Treshold + 5 per avere margine nella verifica dello slope
static volatile uint8_t flag_TLAutoMode=0, flag_AUTO=0;

void SetSamplePeriod(uint32_t periodo_ns){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Stop(&htim3);
 8000ee0:	4851      	ldr	r0, [pc, #324]	; (8001028 <SetSamplePeriod+0x150>)
 8000ee2:	f003 fda6 	bl	8004a32 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_DeInit(&htim3);
 8000ee6:	4850      	ldr	r0, [pc, #320]	; (8001028 <SetSamplePeriod+0x150>)
 8000ee8:	f003 fd4f 	bl	800498a <HAL_TIM_Base_DeInit>

	if(periodo_ns<=100000 && periodo_ns>=10000){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4f      	ldr	r2, [pc, #316]	; (800102c <SetSamplePeriod+0x154>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d83c      	bhi.n	8000f6e <SetSamplePeriod+0x96>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d937      	bls.n	8000f6e <SetSamplePeriod+0x96>

		float autoreload=(periodo_ns*21.0/250.0 -1.0);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff faac 	bl	800045c <__aeabi_ui2d>
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	4b49      	ldr	r3, [pc, #292]	; (8001030 <SetSamplePeriod+0x158>)
 8000f0a:	f7ff fb21 	bl	8000550 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b46      	ldr	r3, [pc, #280]	; (8001034 <SetSamplePeriod+0x15c>)
 8000f1c:	f7ff fc42 	bl	80007a4 <__aeabi_ddiv>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	4b42      	ldr	r3, [pc, #264]	; (8001038 <SetSamplePeriod+0x160>)
 8000f2e:	f7ff f957 	bl	80001e0 <__aeabi_dsub>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fe01 	bl	8000b40 <__aeabi_d2f>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	60fb      	str	r3, [r7, #12]
		htim3.Init.Prescaler = 0;
 8000f42:	4b39      	ldr	r3, [pc, #228]	; (8001028 <SetSamplePeriod+0x150>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
		htim3.Init.Period = round(autoreload);
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff faa9 	bl	80004a0 <__aeabi_f2d>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	ec43 2b10 	vmov	d0, r2, r3
 8000f56:	f005 faf7 	bl	8006548 <round>
 8000f5a:	ec53 2b10 	vmov	r2, r3, d0
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f7ff fdcd 	bl	8000b00 <__aeabi_d2uiz>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <SetSamplePeriod+0x150>)
 8000f6a:	60d3      	str	r3, [r2, #12]
	if(periodo_ns<=100000 && periodo_ns>=10000){
 8000f6c:	e03f      	b.n	8000fee <SetSamplePeriod+0x116>

	}else if(periodo_ns<=100000000 && periodo_ns>100000){
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a32      	ldr	r2, [pc, #200]	; (800103c <SetSamplePeriod+0x164>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d83b      	bhi.n	8000fee <SetSamplePeriod+0x116>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a2c      	ldr	r2, [pc, #176]	; (800102c <SetSamplePeriod+0x154>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d937      	bls.n	8000fee <SetSamplePeriod+0x116>

		float autoreload=(periodo_ns*3.0/25000.0 -1.0);
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff fa6c 	bl	800045c <__aeabi_ui2d>
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	4b2d      	ldr	r3, [pc, #180]	; (8001040 <SetSamplePeriod+0x168>)
 8000f8a:	f7ff fae1 	bl	8000550 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	a322      	add	r3, pc, #136	; (adr r3, 8001020 <SetSamplePeriod+0x148>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fc02 	bl	80007a4 <__aeabi_ddiv>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 0200 	mov.w	r2, #0
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <SetSamplePeriod+0x160>)
 8000fae:	f7ff f917 	bl	80001e0 <__aeabi_dsub>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	4610      	mov	r0, r2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f7ff fdc1 	bl	8000b40 <__aeabi_d2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60bb      	str	r3, [r7, #8]
		htim3.Init.Prescaler = 700;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <SetSamplePeriod+0x150>)
 8000fc4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000fc8:	605a      	str	r2, [r3, #4]
		htim3.Init.Period = round(autoreload);
 8000fca:	68b8      	ldr	r0, [r7, #8]
 8000fcc:	f7ff fa68 	bl	80004a0 <__aeabi_f2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ec43 2b10 	vmov	d0, r2, r3
 8000fd8:	f005 fab6 	bl	8006548 <round>
 8000fdc:	ec53 2b10 	vmov	r2, r3, d0
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f7ff fd8c 	bl	8000b00 <__aeabi_d2uiz>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <SetSamplePeriod+0x150>)
 8000fec:	60d3      	str	r3, [r2, #12]

	}

	  htim3.Instance = TIM3;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <SetSamplePeriod+0x150>)
 8000ff0:	4a14      	ldr	r2, [pc, #80]	; (8001044 <SetSamplePeriod+0x16c>)
 8000ff2:	601a      	str	r2, [r3, #0]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <SetSamplePeriod+0x150>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <SetSamplePeriod+0x150>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <SetSamplePeriod+0x150>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	619a      	str	r2, [r3, #24]
	  HAL_TIM_Base_Init(&htim3);
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <SetSamplePeriod+0x150>)
 8001008:	f003 fc94 	bl	8004934 <HAL_TIM_Base_Init>
	  HAL_TIM_Base_Start(&htim3);
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <SetSamplePeriod+0x150>)
 800100e:	f003 fcec 	bl	80049ea <HAL_TIM_Base_Start>

}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	00000000 	.word	0x00000000
 8001024:	40d86a00 	.word	0x40d86a00
 8001028:	200003c4 	.word	0x200003c4
 800102c:	000186a0 	.word	0x000186a0
 8001030:	40350000 	.word	0x40350000
 8001034:	406f4000 	.word	0x406f4000
 8001038:	3ff00000 	.word	0x3ff00000
 800103c:	05f5e100 	.word	0x05f5e100
 8001040:	40080000 	.word	0x40080000
 8001044:	40000400 	.word	0x40000400

08001048 <SetTriggerLevel>:



void SetTriggerLevel(int level){
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]



	if(level<0) level=0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	da02      	bge.n	800105c <SetTriggerLevel+0x14>
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	e004      	b.n	8001066 <SetTriggerLevel+0x1e>
	else if(level>255) level=250;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2bff      	cmp	r3, #255	; 0xff
 8001060:	dd01      	ble.n	8001066 <SetTriggerLevel+0x1e>
 8001062:	23fa      	movs	r3, #250	; 0xfa
 8001064:	607b      	str	r3, [r7, #4]

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]
 8001076:	615a      	str	r2, [r3, #20]
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <SetTriggerLevel+0x98>)
 800107a:	60bb      	str	r3, [r7, #8]
    AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
    AnalogWDGConfig.ITMode = ENABLE;
 8001080:	2301      	movs	r3, #1
 8001082:	763b      	strb	r3, [r7, #24]

	AnalogWDGConfig.HighThreshold = level;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	60fb      	str	r3, [r7, #12]
	AnalogWDGConfig.LowThreshold = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
	HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <SetTriggerLevel+0x9c>)
 8001094:	f001 ff42 	bl	8002f1c <HAL_ADC_AnalogWDGConfig>

	//cambiato il TL si deve rincominciare a riempire metà buffer
	if(level!=TL){
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <SetTriggerLevel+0xa0>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d018      	beq.n	80010d8 <SetTriggerLevel+0x90>
	if(trigger_type==0 )TL=level;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <SetTriggerLevel+0xa4>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d104      	bne.n	80010ba <SetTriggerLevel+0x72>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <SetTriggerLevel+0xa0>)
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	e005      	b.n	80010c6 <SetTriggerLevel+0x7e>
	else TL=level+5;	//Soglia per la corretta acquisizione del TL in modalità non automatica
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3305      	adds	r3, #5
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <SetTriggerLevel+0xa0>)
 80010c4:	701a      	strb	r2, [r3, #0]
	TTTime=0;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <SetTriggerLevel+0xa8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
	conv_count=0;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <SetTriggerLevel+0xac>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
	TLacq=0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <SetTriggerLevel+0xb0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
	}

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	00800200 	.word	0x00800200
 80010e4:	20000404 	.word	0x20000404
 80010e8:	20000000 	.word	0x20000000
 80010ec:	200003ac 	.word	0x200003ac
 80010f0:	200003a8 	.word	0x200003a8
 80010f4:	200003a4 	.word	0x200003a4
 80010f8:	2000039c 	.word	0x2000039c

080010fc <SetTT>:



void SetTT(uint8_t TT){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]

	//SetTriggerLevel(TL_USER);

	switch(TT){
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d820      	bhi.n	800114e <SetTT+0x52>
 800110c:	a201      	add	r2, pc, #4	; (adr r2, 8001114 <SetTT+0x18>)
 800110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001112:	bf00      	nop
 8001114:	08001125 	.word	0x08001125
 8001118:	0800112f 	.word	0x0800112f
 800111c:	08001137 	.word	0x08001137
 8001120:	08001141 	.word	0x08001141
	case 0:	//AUTO
		TTTime=conv_count;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <SetTT+0x84>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <SetTT+0x88>)
 800112a:	6013      	str	r3, [r2, #0]
		break;
 800112c:	e010      	b.n	8001150 <SetTT+0x54>
	case 1:	//NORMAL abilito AWD
		flag_AUTO=0;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <SetTT+0x8c>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
		break;
 8001134:	e00c      	b.n	8001150 <SetTT+0x54>
	case 2:	//SINGLE
		TTTime=conv_count;
 8001136:	4b12      	ldr	r3, [pc, #72]	; (8001180 <SetTT+0x84>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <SetTT+0x88>)
 800113c:	6013      	str	r3, [r2, #0]
		break;
 800113e:	e007      	b.n	8001150 <SetTT+0x54>
	case 3:	//STOP magari far finire il buffer.........................
		HAL_ADC_Stop_DMA(&hadc1);
 8001140:	4812      	ldr	r0, [pc, #72]	; (800118c <SetTT+0x90>)
 8001142:	f001 fd61 	bl	8002c08 <HAL_ADC_Stop_DMA>
		HAL_ADC_Stop(&hadc1);
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <SetTT+0x90>)
 8001148:	f001 fb16 	bl	8002778 <HAL_ADC_Stop>
		break;
 800114c:	e000      	b.n	8001150 <SetTT+0x54>
	default:
		break;
 800114e:	bf00      	nop
	}

	if(trigger_type==3 && TT!=3){	//solo in questo caso o rischio di resettare buffer
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <SetTT+0x94>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b03      	cmp	r3, #3
 8001158:	d10b      	bne.n	8001172 <SetTT+0x76>
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	2b03      	cmp	r3, #3
 800115e:	d008      	beq.n	8001172 <SetTT+0x76>
	HAL_ADC_Start(&hadc1);
 8001160:	480a      	ldr	r0, [pc, #40]	; (800118c <SetTT+0x90>)
 8001162:	f001 fa63 	bl	800262c <HAL_ADC_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint8_t*)adc_buf, ADC_BUF_LEN);
 8001166:	f240 22fe 	movw	r2, #766	; 0x2fe
 800116a:	490a      	ldr	r1, [pc, #40]	; (8001194 <SetTT+0x98>)
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <SetTT+0x90>)
 800116e:	f001 fc77 	bl	8002a60 <HAL_ADC_Start_DMA>
	}

	trigger_type=TT;
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <SetTT+0x94>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	7013      	strb	r3, [r2, #0]


}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200003a4 	.word	0x200003a4
 8001184:	200003a8 	.word	0x200003a8
 8001188:	200003ae 	.word	0x200003ae
 800118c:	20000404 	.word	0x20000404
 8001190:	200003ac 	.word	0x200003ac
 8001194:	2000009c 	.word	0x2000009c

08001198 <getTT>:

uint8_t getTT(){
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	return trigger_type;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <getTT+0x14>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	b2db      	uxtb	r3, r3
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	200003ac 	.word	0x200003ac

080011b0 <getTLPointer>:

int getTLPointer(){
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
	return punt_TL;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <getTLPointer+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20000094 	.word	0x20000094

080011c8 <getADCbuf>:

void setTLacquired(uint8_t acquired){
	//TL_acquired=acquired;
}

char* getADCbuf(){
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
	return &adc_buf;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <getADCbuf+0x10>)
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	2000009c 	.word	0x2000009c

080011dc <clear_UART>:


void clear_UART(){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
    __HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_IDLE);
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <clear_UART+0x60>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f06f 0210 	mvn.w	r2, #16
 80011ea:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <clear_UART+0x60>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b10      	ldr	r3, [pc, #64]	; (800123c <clear_UART+0x60>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
	__HAL_UART_CLEAR_NEFLAG(&huart2);
 8001202:	2300      	movs	r3, #0
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <clear_UART+0x60>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <clear_UART+0x60>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
	__HAL_UART_CLEAR_FEFLAG(&huart2);
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <clear_UART+0x60>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <clear_UART+0x60>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200004ac 	.word	0x200004ac

08001240 <getStampa>:

int getStampa(){
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	return stampa;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <getStampa+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200003a0 	.word	0x200003a0

08001258 <stampato>:

void stampato(){
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

	stampa=0;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <stampato+0x34>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
	TTTime=0;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <stampato+0x38>)
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
	conv_count=0;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <stampato+0x3c>)
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
	TLacq=0;
 800126e:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <stampato+0x40>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_DMA(&hadc1, &adc_buf, ADC_BUF_LEN);
 8001274:	f240 22fe 	movw	r2, #766	; 0x2fe
 8001278:	4908      	ldr	r1, [pc, #32]	; (800129c <stampato+0x44>)
 800127a:	4809      	ldr	r0, [pc, #36]	; (80012a0 <stampato+0x48>)
 800127c:	f001 fbf0 	bl	8002a60 <HAL_ADC_Start_DMA>
	HAL_ADC_Start(&hadc1);
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <stampato+0x48>)
 8001282:	f001 f9d3 	bl	800262c <HAL_ADC_Start>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200003a0 	.word	0x200003a0
 8001290:	200003a8 	.word	0x200003a8
 8001294:	200003a4 	.word	0x200003a4
 8001298:	2000039c 	.word	0x2000039c
 800129c:	2000009c 	.word	0x2000009c
 80012a0:	20000404 	.word	0x20000404

080012a4 <setFlagAuto>:

void setFlagAuto(){
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
	flag_AUTO=1;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <setFlagAuto+0x14>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	200003ae 	.word	0x200003ae

080012bc <getElapsedTime>:

int getElapsedTime(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return conv_count;
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <getElapsedTime+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200003a4 	.word	0x200003a4

080012d4 <getTTTime>:

int getTTTime(){
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
	return TTTime;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <getTTTime+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200003a8 	.word	0x200003a8

080012ec <getTLAutoMode>:

uint8_t getTLAutoMode(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return flag_TLAutoMode;
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <getTLAutoMode+0x14>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200003ad 	.word	0x200003ad

08001304 <updateTLAutoMode>:

void updateTLAutoMode(){	//per "spezzare" l'interrupt
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0

	SetTriggerLevel(adc_buf[ADC_BUF_LEN - 1 - punt_TLAuto]);
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <updateTLAutoMode+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 8001310:	3301      	adds	r3, #1
 8001312:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <updateTLAutoMode+0x44>)
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	b2db      	uxtb	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe95 	bl	8001048 <SetTriggerLevel>
	punt_TL=punt_TLAuto;
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <updateTLAutoMode+0x40>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <updateTLAutoMode+0x48>)
 8001324:	6013      	str	r3, [r2, #0]
	TLacq=1;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <updateTLAutoMode+0x4c>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	conv_count=0;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <updateTLAutoMode+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
	flag_AUTO=0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <updateTLAutoMode+0x54>)
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
	flag_TLAutoMode=0;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <updateTLAutoMode+0x58>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000098 	.word	0x20000098
 8001348:	2000009c 	.word	0x2000009c
 800134c:	20000094 	.word	0x20000094
 8001350:	2000039c 	.word	0x2000039c
 8001354:	200003a4 	.word	0x200003a4
 8001358:	200003ae 	.word	0x200003ae
 800135c:	200003ad 	.word	0x200003ad

08001360 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]


	if(TLacq==0 && conv_count>= (SECONDHALF+2)) {	//ho acquisito già sufficienti valori prima del primo trigger
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_ADC_LevelOutOfWindowCallback+0x34>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10d      	bne.n	800138c <HAL_ADC_LevelOutOfWindowCallback+0x2c>
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_ADC_LevelOutOfWindowCallback+0x38>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2bc0      	cmp	r3, #192	; 0xc0
 8001376:	dd09      	ble.n	800138c <HAL_ADC_LevelOutOfWindowCallback+0x2c>

		if(flag_AUTO==1) modeAutoSearch();
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <HAL_ADC_LevelOutOfWindowCallback+0x3c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <HAL_ADC_LevelOutOfWindowCallback+0x28>
 8001382:	f000 f865 	bl	8001450 <modeAutoSearch>
		else modeNormal();
	}

}
 8001386:	e001      	b.n	800138c <HAL_ADC_LevelOutOfWindowCallback+0x2c>
		else modeNormal();
 8001388:	f000 f80a 	bl	80013a0 <modeNormal>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000039c 	.word	0x2000039c
 8001398:	200003a4 	.word	0x200003a4
 800139c:	200003ae 	.word	0x200003ae

080013a0 <modeNormal>:

void modeNormal(){
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0

	int tmp = (int) DMA2_Stream0->NDTR-1;
 80013a6:	4b24      	ldr	r3, [pc, #144]	; (8001438 <modeNormal+0x98>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	607b      	str	r3, [r7, #4]


	//check sui valori del puntatore
	if(tmp> ADC_BUF_LEN - 1) tmp=ADC_BUF_LEN - 2;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f240 22fd 	movw	r2, #765	; 0x2fd
 80013b4:	4293      	cmp	r3, r2
 80013b6:	dd03      	ble.n	80013c0 <modeNormal+0x20>
 80013b8:	f44f 733f 	mov.w	r3, #764	; 0x2fc
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	e004      	b.n	80013ca <modeNormal+0x2a>
	else if(tmp<0)  tmp=0;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	da01      	bge.n	80013ca <modeNormal+0x2a>
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]

	//check su possibile underflow
	if(ADC_BUF_LEN - 1 - tmp - 2 >= 0){
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f5c3 733e 	rsb	r3, r3, #760	; 0x2f8
 80013d0:	3303      	adds	r3, #3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db15      	blt.n	8001402 <modeNormal+0x62>

		//check sullo slope e che abbia passato il TL (Potrebbero essere val sì a slope+ ma entrambi al di sopra del TL)
		if(adc_buf[ADC_BUF_LEN - 1 - tmp - 2] < TL){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f5c3 733e 	rsb	r3, r3, #760	; 0x2f8
 80013dc:	3303      	adds	r3, #3
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <modeNormal+0x9c>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	4b16      	ldr	r3, [pc, #88]	; (8001440 <modeNormal+0xa0>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d21e      	bcs.n	800142c <modeNormal+0x8c>


			punt_TL=tmp;
 80013ee:	4a15      	ldr	r2, [pc, #84]	; (8001444 <modeNormal+0xa4>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6013      	str	r3, [r2, #0]
			TLacq=1;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <modeNormal+0xa8>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
			conv_count=0;
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <modeNormal+0xac>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
		TLacq=1;
		conv_count=0;

	}

}
 8001400:	e014      	b.n	800142c <modeNormal+0x8c>
	}else if(adc_buf[ ( (ADC_BUF_LEN - 1)*2 - tmp - 2) +1 ] < TL ){
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
 8001408:	3301      	adds	r3, #1
 800140a:	4a0c      	ldr	r2, [pc, #48]	; (800143c <modeNormal+0x9c>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <modeNormal+0xa0>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	429a      	cmp	r2, r3
 8001418:	d208      	bcs.n	800142c <modeNormal+0x8c>
		punt_TL=tmp;
 800141a:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <modeNormal+0xa4>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]
		TLacq=1;
 8001420:	4b09      	ldr	r3, [pc, #36]	; (8001448 <modeNormal+0xa8>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
		conv_count=0;
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <modeNormal+0xac>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40026410 	.word	0x40026410
 800143c:	2000009c 	.word	0x2000009c
 8001440:	20000000 	.word	0x20000000
 8001444:	20000094 	.word	0x20000094
 8001448:	2000039c 	.word	0x2000039c
 800144c:	200003a4 	.word	0x200003a4

08001450 <modeAutoSearch>:

void modeAutoSearch(){
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0

	int tmp = (int) DMA2_Stream0->NDTR-1;
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <modeAutoSearch+0x9c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	607b      	str	r3, [r7, #4]

		//check sui valori del puntatore
		if(tmp> ADC_BUF_LEN - 1) tmp=ADC_BUF_LEN - 2;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f240 22fd 	movw	r2, #765	; 0x2fd
 8001464:	4293      	cmp	r3, r2
 8001466:	dd03      	ble.n	8001470 <modeAutoSearch+0x20>
 8001468:	f44f 733f 	mov.w	r3, #764	; 0x2fc
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e004      	b.n	800147a <modeAutoSearch+0x2a>
		else if(tmp<0)  tmp=0;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	da01      	bge.n	800147a <modeAutoSearch+0x2a>
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]

		//check su possibile underflow
		if(ADC_BUF_LEN - 1 - tmp - 2 >= 0){
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f5c3 733e 	rsb	r3, r3, #760	; 0x2f8
 8001480:	3303      	adds	r3, #3
 8001482:	2b00      	cmp	r3, #0
 8001484:	db16      	blt.n	80014b4 <modeAutoSearch+0x64>

			//check sullo slope
			if(adc_buf[ADC_BUF_LEN - 1 - tmp - 2] < adc_buf[ADC_BUF_LEN - 1 - tmp]){
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f5c3 733e 	rsb	r3, r3, #760	; 0x2f8
 800148c:	3303      	adds	r3, #3
 800148e:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <modeAutoSearch+0xa0>)
 8001490:	5cd3      	ldrb	r3, [r2, r3]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 800149a:	3301      	adds	r3, #1
 800149c:	4914      	ldr	r1, [pc, #80]	; (80014f0 <modeAutoSearch+0xa0>)
 800149e:	5ccb      	ldrb	r3, [r1, r3]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d21c      	bcs.n	80014e0 <modeAutoSearch+0x90>

				flag_TLAutoMode=1;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <modeAutoSearch+0xa4>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
				punt_TLAuto=tmp;
 80014ac:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <modeAutoSearch+0xa8>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
		}else if(adc_buf[ ( (ADC_BUF_LEN - 1)*2 - tmp - 2) +1 ] < adc_buf[ADC_BUF_LEN - 1 - tmp] ){

			flag_TLAutoMode=1;
			punt_TLAuto=tmp;
		}
}
 80014b2:	e015      	b.n	80014e0 <modeAutoSearch+0x90>
		}else if(adc_buf[ ( (ADC_BUF_LEN - 1)*2 - tmp - 2) +1 ] < adc_buf[ADC_BUF_LEN - 1 - tmp] ){
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
 80014ba:	3301      	adds	r3, #1
 80014bc:	4a0c      	ldr	r2, [pc, #48]	; (80014f0 <modeAutoSearch+0xa0>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 80014c8:	3301      	adds	r3, #1
 80014ca:	4909      	ldr	r1, [pc, #36]	; (80014f0 <modeAutoSearch+0xa0>)
 80014cc:	5ccb      	ldrb	r3, [r1, r3]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d205      	bcs.n	80014e0 <modeAutoSearch+0x90>
			flag_TLAutoMode=1;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <modeAutoSearch+0xa4>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			punt_TLAuto=tmp;
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <modeAutoSearch+0xa8>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40026410 	.word	0x40026410
 80014f0:	2000009c 	.word	0x2000009c
 80014f4:	200003ad 	.word	0x200003ad
 80014f8:	20000098 	.word	0x20000098

080014fc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){	//In teoria chiamata prima di ADC_outOfWindow
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

	conv_count++;
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800150c:	6013      	str	r3, [r2, #0]
	if(conv_count==SECONDHALF && TLacq==1){	//conto 191 coppie di valori dopo la coppia del TL
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2bbf      	cmp	r3, #191	; 0xbf
 8001514:	d10c      	bne.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x34>
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x34>

		HAL_ADC_Stop(&hadc1);
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001520:	f001 f92a 	bl	8002778 <HAL_ADC_Stop>
		HAL_ADC_Stop_DMA(&hadc1);
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001526:	f001 fb6f 	bl	8002c08 <HAL_ADC_Stop_DMA>
		stampa=1;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]

	}

}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200003a4 	.word	0x200003a4
 800153c:	2000039c 	.word	0x2000039c
 8001540:	20000404 	.word	0x20000404
 8001544:	200003a0 	.word	0x200003a0

08001548 <bin2hex>:
static volatile uint8_t inputRecived=0;
static char RxBuf[buf_dim];
static uint8_t indiceBuf=0;

void bin2hex(uint8_t binNum, char *ris)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	6039      	str	r1, [r7, #0]
 8001552:	71fb      	strb	r3, [r7, #7]
    char hexNum[2]="00";
 8001554:	f243 0330 	movw	r3, #12336	; 0x3030
 8001558:	813b      	strh	r3, [r7, #8]
    int i=1;
 800155a:	2301      	movs	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
    uint8_t aux;

    if(binNum<256){
        if(binNum<16){
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b0f      	cmp	r3, #15
 8001562:	d822      	bhi.n	80015aa <bin2hex+0x62>
            hexNum[0]='0';
 8001564:	2330      	movs	r3, #48	; 0x30
 8001566:	723b      	strb	r3, [r7, #8]
        }
        while(binNum>0){
 8001568:	e01f      	b.n	80015aa <bin2hex+0x62>
            aux=binNum%16;
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 030f 	and.w	r3, r3, #15
 8001570:	72fb      	strb	r3, [r7, #11]
            binNum=binNum/16;
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	71fb      	strb	r3, [r7, #7]

            if(aux<10){
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	2b09      	cmp	r3, #9
 800157c:	d809      	bhi.n	8001592 <bin2hex+0x4a>
                hexNum[i]=aux+48;
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	3330      	adds	r3, #48	; 0x30
 8001582:	b2d9      	uxtb	r1, r3
 8001584:	f107 0208 	add.w	r2, r7, #8
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	460a      	mov	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e008      	b.n	80015a4 <bin2hex+0x5c>
            }else{
                hexNum[i]=aux-10+65;
 8001592:	7afb      	ldrb	r3, [r7, #11]
 8001594:	3337      	adds	r3, #55	; 0x37
 8001596:	b2d9      	uxtb	r1, r3
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	460a      	mov	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
            }

            i--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
        while(binNum>0){
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1dc      	bne.n	800156a <bin2hex+0x22>
        }
    }
    ris[0]=hexNum[0];
 80015b0:	7a3a      	ldrb	r2, [r7, #8]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	701a      	strb	r2, [r3, #0]
    ris[1]=hexNum[1];
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	3301      	adds	r3, #1
 80015ba:	7a7a      	ldrb	r2, [r7, #9]
 80015bc:	701a      	strb	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <charTOint>:


uint8_t charTOint(char ch){
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]

	uint8_t res=5;
 80015d6:	2305      	movs	r3, #5
 80015d8:	73fb      	strb	r3, [r7, #15]

	switch(ch){
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3b30      	subs	r3, #48	; 0x30
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d816      	bhi.n	8001610 <charTOint+0x44>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <charTOint+0x1c>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	080015f9 	.word	0x080015f9
 80015ec:	080015ff 	.word	0x080015ff
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800160b 	.word	0x0800160b
	case '0':
		res=0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
		break;
 80015fc:	e009      	b.n	8001612 <charTOint+0x46>
	case '1':
		res=1;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
		break;
 8001602:	e006      	b.n	8001612 <charTOint+0x46>
	case '2':
		res=2;
 8001604:	2302      	movs	r3, #2
 8001606:	73fb      	strb	r3, [r7, #15]
		break;
 8001608:	e003      	b.n	8001612 <charTOint+0x46>
	case '3':
		res=3;
 800160a:	2303      	movs	r3, #3
 800160c:	73fb      	strb	r3, [r7, #15]
		break;
 800160e:	e000      	b.n	8001612 <charTOint+0x46>
	default:
		break;
 8001610:	bf00      	nop
	}
	return res;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <provideOutput>:

void provideOutput(){
 8001620:	b580      	push	{r7, lr}
 8001622:	f5ad 6dc5 	sub.w	sp, sp, #1576	; 0x628
 8001626:	af00      	add	r7, sp, #0


	char txBuff[ADC_BUF_LEN*2+2];	//x2 perche ora ogni valore int diventa sue caratteri hex
	char exa[2]="";
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]

	int indice=0;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
	txBuff[indice++]='*';
 8001634:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 800163e:	1d3a      	adds	r2, r7, #4
 8001640:	212a      	movs	r1, #42	; 0x2a
 8001642:	54d1      	strb	r1, [r2, r3]

	int last=0, overRange=0, underRange=0;
 8001644:	2300      	movs	r3, #0
 8001646:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604

	last=(ADC_BUF_LEN - 1 - getTLPointer()) + SECONDHALF*2;	//non è detto che sia all'interno dei 766 valori e non dia ovflw....
 8001656:	f7ff fdab 	bl	80011b0 <getTLPointer>
 800165a:	4603      	mov	r3, r0
 800165c:	f5c3 638f 	rsb	r3, r3, #1144	; 0x478
 8001660:	3303      	adds	r3, #3
 8001662:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c

	if( last >= ADC_BUF_LEN ) {	//dato che ho overflow non avro underflow
 8001666:	f8d7 360c 	ldr.w	r3, [r7, #1548]	; 0x60c
 800166a:	f240 22fd 	movw	r2, #765	; 0x2fd
 800166e:	4293      	cmp	r3, r2
 8001670:	dd69      	ble.n	8001746 <provideOutput+0x126>

		overRange= abs(ADC_BUF_LEN - 1 - last);
 8001672:	f8d7 360c 	ldr.w	r3, [r7, #1548]	; 0x60c
 8001676:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 800167a:	3301      	adds	r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	bfb8      	it	lt
 8001680:	425b      	neglt	r3, r3
 8001682:	f8c7 3608 	str.w	r3, [r7, #1544]	; 0x608

		for(int k = overRange - 1 ; k>=0; k-- ) {
 8001686:	f8d7 3608 	ldr.w	r3, [r7, #1544]	; 0x608
 800168a:	3b01      	subs	r3, #1
 800168c:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 8001690:	e022      	b.n	80016d8 <provideOutput+0xb8>

			bin2hex(getADCbuf()[k],exa); //riempio da MSB (ultima conversione) verso LSB
 8001692:	f7ff fd99 	bl	80011c8 <getADCbuf>
 8001696:	4602      	mov	r2, r0
 8001698:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	463a      	mov	r2, r7
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff4f 	bl	8001548 <bin2hex>
			txBuff[indice++]=exa[0]; //MSB
 80016aa:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 80016b4:	463a      	mov	r2, r7
 80016b6:	7811      	ldrb	r1, [r2, #0]
 80016b8:	1d3a      	adds	r2, r7, #4
 80016ba:	54d1      	strb	r1, [r2, r3]
			txBuff[indice++]=exa[1]; //LSB
 80016bc:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 80016c6:	463a      	mov	r2, r7
 80016c8:	7851      	ldrb	r1, [r2, #1]
 80016ca:	1d3a      	adds	r2, r7, #4
 80016cc:	54d1      	strb	r1, [r2, r3]
		for(int k = overRange - 1 ; k>=0; k-- ) {
 80016ce:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f8c7 3620 	str.w	r3, [r7, #1568]	; 0x620
 80016d8:	f8d7 3620 	ldr.w	r3, [r7, #1568]	; 0x620
 80016dc:	2b00      	cmp	r3, #0
 80016de:	dad8      	bge.n	8001692 <provideOutput+0x72>

		}

		for(int k = ADC_BUF_LEN - 1 ; k>(ADC_BUF_LEN - 1 - getTLPointer()) - UNTIL_TL; k-- ) {	//così dovrei aver coperto 191 coppie di valori fino al TL+2 incluso
 80016e0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016e4:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 80016e8:	e022      	b.n	8001730 <provideOutput+0x110>

			bin2hex(getADCbuf()[k],exa); //riempio da MSB (ultima conversione) verso LSB
 80016ea:	f7ff fd6d 	bl	80011c8 <getADCbuf>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 80016f4:	4413      	add	r3, r2
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	463a      	mov	r2, r7
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff23 	bl	8001548 <bin2hex>
			txBuff[indice++]=exa[0]; //MSB
 8001702:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 800170c:	463a      	mov	r2, r7
 800170e:	7811      	ldrb	r1, [r2, #0]
 8001710:	1d3a      	adds	r2, r7, #4
 8001712:	54d1      	strb	r1, [r2, r3]
			txBuff[indice++]=exa[1]; //LSB
 8001714:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8001718:	1c5a      	adds	r2, r3, #1
 800171a:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 800171e:	463a      	mov	r2, r7
 8001720:	7851      	ldrb	r1, [r2, #1]
 8001722:	1d3a      	adds	r2, r7, #4
 8001724:	54d1      	strb	r1, [r2, r3]
		for(int k = ADC_BUF_LEN - 1 ; k>(ADC_BUF_LEN - 1 - getTLPointer()) - UNTIL_TL; k-- ) {	//così dovrei aver coperto 191 coppie di valori fino al TL+2 incluso
 8001726:	f8d7 361c 	ldr.w	r3, [r7, #1564]	; 0x61c
 800172a:	3b01      	subs	r3, #1
 800172c:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8001730:	f7ff fd3e 	bl	80011b0 <getTLPointer>
 8001734:	4603      	mov	r3, r0
 8001736:	f5c3 73be 	rsb	r3, r3, #380	; 0x17c
 800173a:	3301      	adds	r3, #1
 800173c:	f8d7 261c 	ldr.w	r2, [r7, #1564]	; 0x61c
 8001740:	429a      	cmp	r2, r3
 8001742:	dcd2      	bgt.n	80016ea <provideOutput+0xca>
 8001744:	e099      	b.n	800187a <provideOutput+0x25a>
	}

	else{	//Ora se non ho avuto overflow vado tranquillo nella senca metà ma probebilmente avrò underflow


		for(int k = last; k> (ADC_BUF_LEN - 1 - getTLPointer()) ; k-- ) {	//così dovrei aver coperto 191 coppie di valori fino al TL+2 incluso
 8001746:	f8d7 360c 	ldr.w	r3, [r7, #1548]	; 0x60c
 800174a:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 800174e:	e022      	b.n	8001796 <provideOutput+0x176>

			bin2hex(getADCbuf()[k],exa); //riempio da MSB (ultima conversione) verso LSB
 8001750:	f7ff fd3a 	bl	80011c8 <getADCbuf>
 8001754:	4602      	mov	r2, r0
 8001756:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	463a      	mov	r2, r7
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fef0 	bl	8001548 <bin2hex>
			txBuff[indice++]=exa[0]; //MSB
 8001768:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 8001772:	463a      	mov	r2, r7
 8001774:	7811      	ldrb	r1, [r2, #0]
 8001776:	1d3a      	adds	r2, r7, #4
 8001778:	54d1      	strb	r1, [r2, r3]
			txBuff[indice++]=exa[1]; //LSB
 800177a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 8001784:	463a      	mov	r2, r7
 8001786:	7851      	ldrb	r1, [r2, #1]
 8001788:	1d3a      	adds	r2, r7, #4
 800178a:	54d1      	strb	r1, [r2, r3]
		for(int k = last; k> (ADC_BUF_LEN - 1 - getTLPointer()) ; k-- ) {	//così dovrei aver coperto 191 coppie di valori fino al TL+2 incluso
 800178c:	f8d7 3618 	ldr.w	r3, [r7, #1560]	; 0x618
 8001790:	3b01      	subs	r3, #1
 8001792:	f8c7 3618 	str.w	r3, [r7, #1560]	; 0x618
 8001796:	f7ff fd0b 	bl	80011b0 <getTLPointer>
 800179a:	4603      	mov	r3, r0
 800179c:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 80017a0:	3301      	adds	r3, #1
 80017a2:	f8d7 2618 	ldr.w	r2, [r7, #1560]	; 0x618
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dcd2      	bgt.n	8001750 <provideOutput+0x130>

		}

		underRange= UNTIL_TL - (ADC_BUF_LEN - 1 - getTLPointer()) -1; //-1 finale perche si va ad es da 50 a 0 (51 val) e poi da 765 a 433 (333 valori, da 765 a  433)
 80017aa:	f7ff fd01 	bl	80011b0 <getTLPointer>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f5a3 73bf 	sub.w	r3, r3, #382	; 0x17e
 80017b4:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604

		for(int k = (ADC_BUF_LEN - 1 - getTLPointer()) ; k>=0  ; k-- ) {	//così dovrei aver coperto 191 coppie di valori fino al TL+2 incluso
 80017b8:	f7ff fcfa 	bl	80011b0 <getTLPointer>
 80017bc:	4603      	mov	r3, r0
 80017be:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 80017c2:	3301      	adds	r3, #1
 80017c4:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 80017c8:	e022      	b.n	8001810 <provideOutput+0x1f0>

			bin2hex(getADCbuf()[k],exa); //riempio da MSB (ultima conversione) verso LSB
 80017ca:	f7ff fcfd 	bl	80011c8 <getADCbuf>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 80017d4:	4413      	add	r3, r2
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	463a      	mov	r2, r7
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff feb3 	bl	8001548 <bin2hex>
			txBuff[indice++]=exa[0]; //MSB
 80017e2:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 80017ec:	463a      	mov	r2, r7
 80017ee:	7811      	ldrb	r1, [r2, #0]
 80017f0:	1d3a      	adds	r2, r7, #4
 80017f2:	54d1      	strb	r1, [r2, r3]
			txBuff[indice++]=exa[1]; //LSB
 80017f4:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 80017fe:	463a      	mov	r2, r7
 8001800:	7851      	ldrb	r1, [r2, #1]
 8001802:	1d3a      	adds	r2, r7, #4
 8001804:	54d1      	strb	r1, [r2, r3]
		for(int k = (ADC_BUF_LEN - 1 - getTLPointer()) ; k>=0  ; k-- ) {	//così dovrei aver coperto 191 coppie di valori fino al TL+2 incluso
 8001806:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 800180a:	3b01      	subs	r3, #1
 800180c:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8001810:	f8d7 3614 	ldr.w	r3, [r7, #1556]	; 0x614
 8001814:	2b00      	cmp	r3, #0
 8001816:	dad8      	bge.n	80017ca <provideOutput+0x1aa>

		}

		for(int k = ADC_BUF_LEN - 1; k> ADC_BUF_LEN - 1 - underRange; k-- ) {
 8001818:	f240 23fd 	movw	r3, #765	; 0x2fd
 800181c:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 8001820:	e022      	b.n	8001868 <provideOutput+0x248>

			bin2hex(getADCbuf()[k],exa); //riempio da MSB (ultima conversione) verso LSB
 8001822:	f7ff fcd1 	bl	80011c8 <getADCbuf>
 8001826:	4602      	mov	r2, r0
 8001828:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	463a      	mov	r2, r7
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe87 	bl	8001548 <bin2hex>
			txBuff[indice++]=exa[0]; //MSB
 800183a:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 8001844:	463a      	mov	r2, r7
 8001846:	7811      	ldrb	r1, [r2, #0]
 8001848:	1d3a      	adds	r2, r7, #4
 800184a:	54d1      	strb	r1, [r2, r3]
			txBuff[indice++]=exa[1]; //LSB
 800184c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8001850:	1c5a      	adds	r2, r3, #1
 8001852:	f8c7 2624 	str.w	r2, [r7, #1572]	; 0x624
 8001856:	463a      	mov	r2, r7
 8001858:	7851      	ldrb	r1, [r2, #1]
 800185a:	1d3a      	adds	r2, r7, #4
 800185c:	54d1      	strb	r1, [r2, r3]
		for(int k = ADC_BUF_LEN - 1; k> ADC_BUF_LEN - 1 - underRange; k-- ) {
 800185e:	f8d7 3610 	ldr.w	r3, [r7, #1552]	; 0x610
 8001862:	3b01      	subs	r3, #1
 8001864:	f8c7 3610 	str.w	r3, [r7, #1552]	; 0x610
 8001868:	f8d7 3604 	ldr.w	r3, [r7, #1540]	; 0x604
 800186c:	f5c3 733f 	rsb	r3, r3, #764	; 0x2fc
 8001870:	3301      	adds	r3, #1
 8001872:	f8d7 2610 	ldr.w	r2, [r7, #1552]	; 0x610
 8001876:	429a      	cmp	r2, r3
 8001878:	dcd3      	bgt.n	8001822 <provideOutput+0x202>
		}

	}
	txBuff[indice]='#';
 800187a:	1d3a      	adds	r2, r7, #4
 800187c:	f8d7 3624 	ldr.w	r3, [r7, #1572]	; 0x624
 8001880:	4413      	add	r3, r2
 8001882:	2223      	movs	r2, #35	; 0x23
 8001884:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(&huart2, &txBuff, ADC_BUF_LEN*2+2 ,150);
 8001886:	1d39      	adds	r1, r7, #4
 8001888:	2396      	movs	r3, #150	; 0x96
 800188a:	f240 52fe 	movw	r2, #1534	; 0x5fe
 800188e:	4804      	ldr	r0, [pc, #16]	; (80018a0 <provideOutput+0x280>)
 8001890:	f003 ff1d 	bl	80056ce <HAL_UART_Transmit>
}
 8001894:	bf00      	nop
 8001896:	f507 67c5 	add.w	r7, r7, #1576	; 0x628
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200004ac 	.word	0x200004ac

080018a4 <fillRxBuf>:


uint8_t fillRxBuf(char carattere){
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]


	RxBuf[indiceBuf]=carattere;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <fillRxBuf+0x48>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <fillRxBuf+0x4c>)
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	5453      	strb	r3, [r2, r1]
	indiceBuf++;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <fillRxBuf+0x48>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <fillRxBuf+0x48>)
 80018c4:	701a      	strb	r2, [r3, #0]
	if(carattere=='#' || indiceBuf==buf_dim){
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	2b23      	cmp	r3, #35	; 0x23
 80018ca:	d003      	beq.n	80018d4 <fillRxBuf+0x30>
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <fillRxBuf+0x48>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d104      	bne.n	80018de <fillRxBuf+0x3a>
		indiceBuf=0;
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <fillRxBuf+0x48>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
		return 1;	//finita la stringa
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <fillRxBuf+0x3c>
	}

	return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200003bc 	.word	0x200003bc
 80018f0:	200003b0 	.word	0x200003b0

080018f4 <analizzaRxBUf>:




void analizzaRxBUf(){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0


  //analizzo il buffer completo
  if(RxBuf[0] == '*'){
 80018fa:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <analizzaRxBUf+0xb8>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001900:	d14f      	bne.n	80019a2 <analizzaRxBUf+0xae>

	  if (RxBuf[1]=='S' && RxBuf[2]=='P'){
 8001902:	4b2a      	ldr	r3, [pc, #168]	; (80019ac <analizzaRxBUf+0xb8>)
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	2b53      	cmp	r3, #83	; 0x53
 8001908:	d110      	bne.n	800192c <analizzaRxBUf+0x38>
 800190a:	4b28      	ldr	r3, [pc, #160]	; (80019ac <analizzaRxBUf+0xb8>)
 800190c:	789b      	ldrb	r3, [r3, #2]
 800190e:	2b50      	cmp	r3, #80	; 0x50
 8001910:	d10c      	bne.n	800192c <analizzaRxBUf+0x38>

		  if (RxBuf[buf_dim-1]=='#') SetSamplePeriod(hex2dec(RxBuf,8));
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <analizzaRxBUf+0xb8>)
 8001914:	7adb      	ldrb	r3, [r3, #11]
 8001916:	2b23      	cmp	r3, #35	; 0x23
 8001918:	d143      	bne.n	80019a2 <analizzaRxBUf+0xae>
 800191a:	2108      	movs	r1, #8
 800191c:	4823      	ldr	r0, [pc, #140]	; (80019ac <analizzaRxBUf+0xb8>)
 800191e:	f000 f847 	bl	80019b0 <hex2dec>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fad7 	bl	8000ed8 <SetSamplePeriod>
 800192a:	e03a      	b.n	80019a2 <analizzaRxBUf+0xae>

	  }else if (RxBuf[1]=='T' && RxBuf[2]=='L'){
 800192c:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <analizzaRxBUf+0xb8>)
 800192e:	785b      	ldrb	r3, [r3, #1]
 8001930:	2b54      	cmp	r3, #84	; 0x54
 8001932:	d110      	bne.n	8001956 <analizzaRxBUf+0x62>
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <analizzaRxBUf+0xb8>)
 8001936:	789b      	ldrb	r3, [r3, #2]
 8001938:	2b4c      	cmp	r3, #76	; 0x4c
 800193a:	d10c      	bne.n	8001956 <analizzaRxBUf+0x62>

		  if (RxBuf[5]=='#') SetTriggerLevel(hex2dec(RxBuf,2));	//setto TL user
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <analizzaRxBUf+0xb8>)
 800193e:	795b      	ldrb	r3, [r3, #5]
 8001940:	2b23      	cmp	r3, #35	; 0x23
 8001942:	d12e      	bne.n	80019a2 <analizzaRxBUf+0xae>
 8001944:	2102      	movs	r1, #2
 8001946:	4819      	ldr	r0, [pc, #100]	; (80019ac <analizzaRxBUf+0xb8>)
 8001948:	f000 f832 	bl	80019b0 <hex2dec>
 800194c:	4603      	mov	r3, r0
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fb7a 	bl	8001048 <SetTriggerLevel>
 8001954:	e025      	b.n	80019a2 <analizzaRxBUf+0xae>

	  }else if (RxBuf[1]=='T' && RxBuf[2]=='T'){
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <analizzaRxBUf+0xb8>)
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	2b54      	cmp	r3, #84	; 0x54
 800195c:	d121      	bne.n	80019a2 <analizzaRxBUf+0xae>
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <analizzaRxBUf+0xb8>)
 8001960:	789b      	ldrb	r3, [r3, #2]
 8001962:	2b54      	cmp	r3, #84	; 0x54
 8001964:	d11d      	bne.n	80019a2 <analizzaRxBUf+0xae>

		  if (RxBuf[5]=='#') {
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <analizzaRxBUf+0xb8>)
 8001968:	795b      	ldrb	r3, [r3, #5]
 800196a:	2b23      	cmp	r3, #35	; 0x23
 800196c:	d119      	bne.n	80019a2 <analizzaRxBUf+0xae>

			  uint8_t TT_tmp=charTOint(RxBuf[4]);
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <analizzaRxBUf+0xb8>)
 8001970:	791b      	ldrb	r3, [r3, #4]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fe2a 	bl	80015cc <charTOint>
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]

			  if(RxBuf[3]=='0' && TT_tmp<=3){
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <analizzaRxBUf+0xb8>)
 800197e:	78db      	ldrb	r3, [r3, #3]
 8001980:	2b30      	cmp	r3, #48	; 0x30
 8001982:	d10e      	bne.n	80019a2 <analizzaRxBUf+0xae>
 8001984:	79fb      	ldrb	r3, [r7, #7]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d80b      	bhi.n	80019a2 <analizzaRxBUf+0xae>
				  if(getTT()!=TT_tmp)  SetTT(TT_tmp);
 800198a:	f7ff fc05 	bl	8001198 <getTT>
 800198e:	4603      	mov	r3, r0
 8001990:	461a      	mov	r2, r3
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4293      	cmp	r3, r2
 8001996:	d004      	beq.n	80019a2 <analizzaRxBUf+0xae>
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fbae 	bl	80010fc <SetTT>
			  	 }
		  	 }
	  	  }

  	  }
}
 80019a0:	e7ff      	b.n	80019a2 <analizzaRxBUf+0xae>
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	200003b0 	.word	0x200003b0

080019b0 <hex2dec>:


int hex2dec(char hex[], int valHexSize){
 80019b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]

    int val, pos=valHexSize-1, decimal = 0;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	3b01      	subs	r3, #1
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]

    for(int i=3; i<valHexSize+3; i++){
 80019c6:	2303      	movs	r3, #3
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e066      	b.n	8001a9a <hex2dec+0xea>

        /* Find the decimal representation of hex[i] */
        if(hex[i]>='0' && hex[i]<='9')
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b2f      	cmp	r3, #47	; 0x2f
 80019d6:	d90c      	bls.n	80019f2 <hex2dec+0x42>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4413      	add	r3, r2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b39      	cmp	r3, #57	; 0x39
 80019e2:	d806      	bhi.n	80019f2 <hex2dec+0x42>
        {
            val = hex[i] - 48;
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	4413      	add	r3, r2
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3b30      	subs	r3, #48	; 0x30
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	e024      	b.n	8001a3c <hex2dec+0x8c>
        }
        else if(hex[i]>='a' && hex[i]<='f')
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b60      	cmp	r3, #96	; 0x60
 80019fc:	d90c      	bls.n	8001a18 <hex2dec+0x68>
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b66      	cmp	r3, #102	; 0x66
 8001a08:	d806      	bhi.n	8001a18 <hex2dec+0x68>
        {
            val = hex[i] - 97 + 10;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	4413      	add	r3, r2
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3b57      	subs	r3, #87	; 0x57
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e011      	b.n	8001a3c <hex2dec+0x8c>
        }
        else if(hex[i]>='A' && hex[i]<='F')
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d90b      	bls.n	8001a3c <hex2dec+0x8c>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b46      	cmp	r3, #70	; 0x46
 8001a2e:	d805      	bhi.n	8001a3c <hex2dec+0x8c>
        {
            val = hex[i] - 65 + 10;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	3b37      	subs	r3, #55	; 0x37
 8001a3a:	617b      	str	r3, [r7, #20]
        }
        //printf("(%d * 16^%d) + ", val, pos);
        decimal = decimal + (val * pow(16, pos));
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7fe fd1d 	bl	800047c <__aeabi_i2d>
 8001a42:	4604      	mov	r4, r0
 8001a44:	460d      	mov	r5, r1
 8001a46:	6978      	ldr	r0, [r7, #20]
 8001a48:	f7fe fd18 	bl	800047c <__aeabi_i2d>
 8001a4c:	4680      	mov	r8, r0
 8001a4e:	4689      	mov	r9, r1
 8001a50:	6938      	ldr	r0, [r7, #16]
 8001a52:	f7fe fd13 	bl	800047c <__aeabi_i2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	ec43 2b11 	vmov	d1, r2, r3
 8001a5e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8001ab0 <hex2dec+0x100>
 8001a62:	f004 fdb7 	bl	80065d4 <pow>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	f7fe fd6f 	bl	8000550 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fbb3 	bl	80001e4 <__adddf3>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7ff f813 	bl	8000ab0 <__aeabi_d2iz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60fb      	str	r3, [r7, #12]
        pos--;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
    for(int i=3; i<valHexSize+3; i++){
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3301      	adds	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dd93      	ble.n	80019cc <hex2dec+0x1c>
    }

    return decimal;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab0:	00000000 	.word	0x00000000
 8001ab4:	40300000 	.word	0x40300000

08001ab8 <getStatusRx>:

uint8_t getStatusRx(){
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	return inputRecived;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <getStatusRx+0x14>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	200003af 	.word	0x200003af

08001ad0 <rstStatusRx>:

void rstStatusRx(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	inputRecived=0;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <rstStatusRx+0x14>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	200003af 	.word	0x200003af

08001ae8 <HAL_UART_RxCpltCallback>:


//SI ASPETTA ARRIVI UN NUMERO DI CARATTERI PARI A SIZEOF(RXBUF) PRIMA DI ANALIZZARE
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)	//Non riparte da sola fin che non richiamo HAL_UART_Receive_IT
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	inputRecived=1;
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_UART_RxCpltCallback+0x1c>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
	clear_UART();
 8001af6:	f7ff fb71 	bl	80011dc <clear_UART>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200003af 	.word	0x200003af

08001b08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b0c:	f000 fcd8 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b10:	f000 f810 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b14:	f000 f9b8 	bl	8001e88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b18:	f000 f996 	bl	8001e48 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b1c:	f000 f874 	bl	8001c08 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001b20:	f000 f968 	bl	8001df4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001b24:	f000 f8f2 	bl	8001d0c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HWInit();	//Inizializza il DMA, il TIM3 e abilita gli interrupt in ricezione
 8001b28:	f000 fa68 	bl	8001ffc <HWInit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  opLoop();	//esegue il flusso di operazioni primario
 8001b2c:	f000 fa84 	bl	8002038 <opLoop>
 8001b30:	e7fc      	b.n	8001b2c <main+0x24>
	...

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	2230      	movs	r2, #48	; 0x30
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 fcf8 	bl	8006538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	4b28      	ldr	r3, [pc, #160]	; (8001c00 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	4a27      	ldr	r2, [pc, #156]	; (8001c00 <SystemClock_Config+0xcc>)
 8001b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	; 0x40
 8001b68:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <SystemClock_Config+0xcc>)
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b74:	2300      	movs	r3, #0
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b80:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <SystemClock_Config+0xd0>)
 8001b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <SystemClock_Config+0xd0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001bac:	2354      	movs	r3, #84	; 0x54
 8001bae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fa79 	bl	80040b4 <HAL_RCC_OscConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bc8:	f000 fa12 	bl	8001ff0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bcc:	230f      	movs	r3, #15
 8001bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2102      	movs	r1, #2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fcd3 	bl	8004594 <HAL_RCC_ClockConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001bf4:	f000 f9fc 	bl	8001ff0 <Error_Handler>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000

08001c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
 8001c1c:	611a      	str	r2, [r3, #16]
 8001c1e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c2e:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <MX_ADC1_Init+0xfc>)
 8001c30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c32:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001c42:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c48:	4b2d      	ldr	r3, [pc, #180]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c4e:	4b2c      	ldr	r3, [pc, #176]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c6e:	2202      	movs	r2, #2
 8001c70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c7a:	4b21      	ldr	r3, [pc, #132]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c80:	481f      	ldr	r0, [pc, #124]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001c82:	f000 fc8f 	bl	80025a4 <HAL_ADC_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001c8c:	f000 f9b0 	bl	8001ff0 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <MX_ADC1_Init+0x100>)
 8001c92:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 199;
 8001c94:	23c7      	movs	r3, #199	; 0xc7
 8001c96:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001ca6:	f107 0310 	add.w	r3, r7, #16
 8001caa:	4619      	mov	r1, r3
 8001cac:	4814      	ldr	r0, [pc, #80]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001cae:	f001 f935 	bl	8002f1c <HAL_ADC_AnalogWDGConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001cb8:	f000 f99a 	bl	8001ff0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4619      	mov	r1, r3
 8001ccc:	480c      	ldr	r0, [pc, #48]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001cce:	f001 f803 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001cd8:	f000 f98a 	bl	8001ff0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001cdc:	230f      	movs	r3, #15
 8001cde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_ADC1_Init+0xf8>)
 8001cea:	f000 fff5 	bl	8002cd8 <HAL_ADC_ConfigChannel>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8001cf4:	f000 f97c 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000404 	.word	0x20000404
 8001d04:	40012000 	.word	0x40012000
 8001d08:	00800200 	.word	0x00800200

08001d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08e      	sub	sp, #56	; 0x38
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3c:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d3e:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <MX_TIM3_Init+0xe4>)
 8001d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 700;
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d44:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001d48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b28      	ldr	r3, [pc, #160]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1200;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d52:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001d56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d64:	4821      	ldr	r0, [pc, #132]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d66:	f002 fde5 	bl	8004934 <HAL_TIM_Base_Init>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d70:	f000 f93e 	bl	8001ff0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	481a      	ldr	r0, [pc, #104]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d82:	f003 f843 	bl	8004e0c <HAL_TIM_ConfigClockSource>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d8c:	f000 f930 	bl	8001ff0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001d90:	4816      	ldr	r0, [pc, #88]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001d92:	f002 fe9d 	bl	8004ad0 <HAL_TIM_OC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d9c:	f000 f928 	bl	8001ff0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001da0:	2320      	movs	r3, #32
 8001da2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001da8:	f107 0320 	add.w	r3, r7, #32
 8001dac:	4619      	mov	r1, r3
 8001dae:	480f      	ldr	r0, [pc, #60]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001db0:	f003 fbbe 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001dba:	f000 f919 	bl	8001ff0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_TIM3_Init+0xe0>)
 8001dd6:	f002 ffb9 	bl	8004d4c <HAL_TIM_OC_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001de0:	f000 f906 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	3738      	adds	r7, #56	; 0x38
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200003c4 	.word	0x200003c4
 8001df0:	40000400 	.word	0x40000400

08001df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <MX_USART2_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f003 fc02 	bl	8005634 <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e36:	f000 f8db 	bl	8001ff0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200004ac 	.word	0x200004ac
 8001e44:	40004400 	.word	0x40004400

08001e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <MX_DMA_Init+0x3c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <MX_DMA_Init+0x3c>)
 8001e58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <MX_DMA_Init+0x3c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	2038      	movs	r0, #56	; 0x38
 8001e70:	f001 fb3b 	bl	80034ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e74:	2038      	movs	r0, #56	; 0x38
 8001e76:	f001 fb54 	bl	8003522 <HAL_NVIC_EnableIRQ>

}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
 8001e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b4a      	ldr	r3, [pc, #296]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a3e      	ldr	r2, [pc, #248]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	607b      	str	r3, [r7, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	603b      	str	r3, [r7, #0]
 8001f12:	4b31      	ldr	r3, [pc, #196]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001f18:	f043 0308 	orr.w	r3, r3, #8
 8001f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1e:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <MX_GPIO_Init+0x150>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2120      	movs	r1, #32
 8001f2e:	482b      	ldr	r0, [pc, #172]	; (8001fdc <MX_GPIO_Init+0x154>)
 8001f30:	f002 f8a6 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC6 PC7 PC8 PC9
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001f34:	f64f 73df 	movw	r3, #65503	; 0xffdf
 8001f38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4825      	ldr	r0, [pc, #148]	; (8001fe0 <MX_GPIO_Init+0x158>)
 8001f4a:	f001 ff15 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f52:	2303      	movs	r3, #3
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4820      	ldr	r0, [pc, #128]	; (8001fe4 <MX_GPIO_Init+0x15c>)
 8001f62:	f001 ff09 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001f66:	f649 73d2 	movw	r3, #40914	; 0x9fd2
 8001f6a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4818      	ldr	r0, [pc, #96]	; (8001fdc <MX_GPIO_Init+0x154>)
 8001f7c:	f001 fefc 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f80:	2320      	movs	r3, #32
 8001f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f84:	2301      	movs	r3, #1
 8001f86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4811      	ldr	r0, [pc, #68]	; (8001fdc <MX_GPIO_Init+0x154>)
 8001f98:	f001 feee 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001f9c:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001fa0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480d      	ldr	r0, [pc, #52]	; (8001fe8 <MX_GPIO_Init+0x160>)
 8001fb2:	f001 fee1 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fb6:	2304      	movs	r3, #4
 8001fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc2:	f107 0314 	add.w	r3, r7, #20
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4808      	ldr	r0, [pc, #32]	; (8001fec <MX_GPIO_Init+0x164>)
 8001fca:	f001 fed5 	bl	8003d78 <HAL_GPIO_Init>

}
 8001fce:	bf00      	nop
 8001fd0:	3728      	adds	r7, #40	; 0x28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40021c00 	.word	0x40021c00
 8001fe8:	40020400 	.word	0x40020400
 8001fec:	40020c00 	.word	0x40020c00

08001ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff4:	b672      	cpsid	i
}
 8001ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <Error_Handler+0x8>
	...

08001ffc <HWInit>:

#include "opManage.h"
#define ADC_BUF_LEN 766
static volatile char RxData[1];

void HWInit(){
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0

	  HAL_ADC_Start_DMA(&hadc1, (uint8_t*)getADCbuf(), ADC_BUF_LEN);
 8002000:	f7ff f8e2 	bl	80011c8 <getADCbuf>
 8002004:	4603      	mov	r3, r0
 8002006:	f240 22fe 	movw	r2, #766	; 0x2fe
 800200a:	4619      	mov	r1, r3
 800200c:	4806      	ldr	r0, [pc, #24]	; (8002028 <HWInit+0x2c>)
 800200e:	f000 fd27 	bl	8002a60 <HAL_ADC_Start_DMA>
	  HAL_TIM_Base_Start_IT(&htim3);
 8002012:	4806      	ldr	r0, [pc, #24]	; (800202c <HWInit+0x30>)
 8002014:	f002 fd38 	bl	8004a88 <HAL_TIM_Base_Start_IT>
	  HAL_UART_Receive_IT(&huart2, &RxData, sizeof(RxData));
 8002018:	2201      	movs	r2, #1
 800201a:	4905      	ldr	r1, [pc, #20]	; (8002030 <HWInit+0x34>)
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <HWInit+0x38>)
 800201e:	f003 fbef 	bl	8005800 <HAL_UART_Receive_IT>
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000404 	.word	0x20000404
 800202c:	200003c4 	.word	0x200003c4
 8002030:	200003c0 	.word	0x200003c0
 8002034:	200004ac 	.word	0x200004ac

08002038 <opLoop>:


void opLoop(){
 8002038:	b598      	push	{r3, r4, r7, lr}
 800203a:	af00      	add	r7, sp, #0

	  if(getStampa()==1){
 800203c:	f7ff f900 	bl	8001240 <getStampa>
 8002040:	4603      	mov	r3, r0
 8002042:	2b01      	cmp	r3, #1
 8002044:	d10b      	bne.n	800205e <opLoop+0x26>

		  provideOutput();
 8002046:	f7ff faeb 	bl	8001620 <provideOutput>
		  stampato();
 800204a:	f7ff f905 	bl	8001258 <stampato>

		  if(getTT()==2) SetTT(3);
 800204e:	f7ff f8a3 	bl	8001198 <getTT>
 8002052:	4603      	mov	r3, r0
 8002054:	2b02      	cmp	r3, #2
 8002056:	d102      	bne.n	800205e <opLoop+0x26>
 8002058:	2003      	movs	r0, #3
 800205a:	f7ff f84f 	bl	80010fc <SetTT>
	  }

	  // getElapsedTime(),getTTTime() resettati a ogni stampa
	  //chiamata ogni volta che in modalità automatica si perde Trigger su un buffer
	  if(getTT()==0 && getElapsedTime()-getTTTime() > ADC_BUF_LEN/2){	//quando siamo ad ADC_BUF_LEN/2 in realtà ha gia acquisito ADC_BUF_LEN valori
 800205e:	f7ff f89b 	bl	8001198 <getTT>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10e      	bne.n	8002086 <opLoop+0x4e>
 8002068:	f7ff f928 	bl	80012bc <getElapsedTime>
 800206c:	4604      	mov	r4, r0
 800206e:	f7ff f931 	bl	80012d4 <getTTTime>
 8002072:	4603      	mov	r3, r0
 8002074:	1ae3      	subs	r3, r4, r3
 8002076:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800207a:	db04      	blt.n	8002086 <opLoop+0x4e>

		  SetTriggerLevel(0);	//resetta anche i tempi
 800207c:	2000      	movs	r0, #0
 800207e:	f7fe ffe3 	bl	8001048 <SetTriggerLevel>
		  setFlagAuto(); //resettato quando viene trovato il trigger level in modalità automatica
 8002082:	f7ff f90f 	bl	80012a4 <setFlagAuto>

	  }
	  if(getTT()==2 && getElapsedTime()-getTTTime() > ADC_BUF_LEN/2) SetTT(3);
 8002086:	f7ff f887 	bl	8001198 <getTT>
 800208a:	4603      	mov	r3, r0
 800208c:	2b02      	cmp	r3, #2
 800208e:	d10c      	bne.n	80020aa <opLoop+0x72>
 8002090:	f7ff f914 	bl	80012bc <getElapsedTime>
 8002094:	4604      	mov	r4, r0
 8002096:	f7ff f91d 	bl	80012d4 <getTTTime>
 800209a:	4603      	mov	r3, r0
 800209c:	1ae3      	subs	r3, r4, r3
 800209e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80020a2:	db02      	blt.n	80020aa <opLoop+0x72>
 80020a4:	2003      	movs	r0, #3
 80020a6:	f7ff f829 	bl	80010fc <SetTT>

	  if(getTLAutoMode()==1) updateTLAutoMode();	//eseguita quando viene trovato il trigger level in modalità automatica
 80020aa:	f7ff f91f 	bl	80012ec <getTLAutoMode>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <opLoop+0x80>
 80020b4:	f7ff f926 	bl	8001304 <updateTLAutoMode>

	  /////////////////ricezione//////////////////

		if(getStatusRx()==1){	//così sono sicuro che tra un IR e l'altro eseguo il loop
 80020b8:	f7ff fcfe 	bl	8001ab8 <getStatusRx>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d111      	bne.n	80020e6 <opLoop+0xae>

			rstStatusRx();
 80020c2:	f7ff fd05 	bl	8001ad0 <rstStatusRx>
			//operazione sul dato

			if(fillRxBuf(RxData[0])==1) analizzaRxBUf();
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <opLoop+0xb4>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fbe9 	bl	80018a4 <fillRxBuf>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <opLoop+0xa4>
 80020d8:	f7ff fc0c 	bl	80018f4 <analizzaRxBUf>

			//abilito IR per nuovo dato
			HAL_UART_Receive_IT(&huart2, &RxData, sizeof(RxData));
 80020dc:	2201      	movs	r2, #1
 80020de:	4903      	ldr	r1, [pc, #12]	; (80020ec <opLoop+0xb4>)
 80020e0:	4803      	ldr	r0, [pc, #12]	; (80020f0 <opLoop+0xb8>)
 80020e2:	f003 fb8d 	bl	8005800 <HAL_UART_Receive_IT>
		}

}
 80020e6:	bf00      	nop
 80020e8:	bd98      	pop	{r3, r4, r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200003c0 	.word	0x200003c0
 80020f0:	200004ac 	.word	0x200004ac

080020f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_MspInit+0x4c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_MspInit+0x4c>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_MspInit+0x4c>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a08      	ldr	r2, [pc, #32]	; (8002140 <HAL_MspInit+0x4c>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_MspInit+0x4c>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800

08002144 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3f      	ldr	r2, [pc, #252]	; (8002260 <HAL_ADC_MspInit+0x11c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d177      	bne.n	8002256 <HAL_ADC_MspInit+0x112>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b3e      	ldr	r3, [pc, #248]	; (8002264 <HAL_ADC_MspInit+0x120>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a3d      	ldr	r2, [pc, #244]	; (8002264 <HAL_ADC_MspInit+0x120>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b3b      	ldr	r3, [pc, #236]	; (8002264 <HAL_ADC_MspInit+0x120>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b37      	ldr	r3, [pc, #220]	; (8002264 <HAL_ADC_MspInit+0x120>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_ADC_MspInit+0x120>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	; 0x30
 8002192:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_ADC_MspInit+0x120>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
 80021a2:	4b30      	ldr	r3, [pc, #192]	; (8002264 <HAL_ADC_MspInit+0x120>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <HAL_ADC_MspInit+0x120>)
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_ADC_MspInit+0x120>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	60bb      	str	r3, [r7, #8]
 80021b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ba:	2301      	movs	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021be:	2303      	movs	r3, #3
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4826      	ldr	r0, [pc, #152]	; (8002268 <HAL_ADC_MspInit+0x124>)
 80021ce:	f001 fdd3 	bl	8003d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021d2:	2320      	movs	r3, #32
 80021d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d6:	2303      	movs	r3, #3
 80021d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4821      	ldr	r0, [pc, #132]	; (800226c <HAL_ADC_MspInit+0x128>)
 80021e6:	f001 fdc7 	bl	8003d78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021ea:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 80021ec:	4a21      	ldr	r2, [pc, #132]	; (8002274 <HAL_ADC_MspInit+0x130>)
 80021ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fc:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 8002204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002208:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002216:	4b16      	ldr	r3, [pc, #88]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 8002218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800222a:	4811      	ldr	r0, [pc, #68]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 800222c:	f001 f9a2 	bl	8003574 <HAL_DMA_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002236:	f7ff fedb 	bl	8001ff0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 800223e:	639a      	str	r2, [r3, #56]	; 0x38
 8002240:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_ADC_MspInit+0x12c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2101      	movs	r1, #1
 800224a:	2012      	movs	r0, #18
 800224c:	f001 f94d 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002250:	2012      	movs	r0, #18
 8002252:	f001 f966 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012000 	.word	0x40012000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000
 800226c:	40020800 	.word	0x40020800
 8002270:	2000044c 	.word	0x2000044c
 8002274:	40026410 	.word	0x40026410

08002278 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0e      	ldr	r2, [pc, #56]	; (80022c0 <HAL_TIM_Base_MspInit+0x48>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d115      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <HAL_TIM_Base_MspInit+0x4c>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <HAL_TIM_Base_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	201d      	movs	r0, #29
 80022ac:	f001 f91d 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022b0:	201d      	movs	r0, #29
 80022b2:	f001 f936 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_TIM_Base_MspDeInit+0x2c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM3_MspDeInit 0 */

  /* USER CODE END TIM3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM3_CLK_DISABLE();
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_TIM_Base_MspDeInit+0x30>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <HAL_TIM_Base_MspDeInit+0x30>)
 80022e0:	f023 0302 	bic.w	r3, r3, #2
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80022e6:	201d      	movs	r0, #29
 80022e8:	f001 f929 	bl	800353e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b08a      	sub	sp, #40	; 0x28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0314 	add.w	r3, r7, #20
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <HAL_UART_MspInit+0x94>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d133      	bne.n	8002386 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	613b      	str	r3, [r7, #16]
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_UART_MspInit+0x98>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <HAL_UART_MspInit+0x98>)
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	6413      	str	r3, [r2, #64]	; 0x40
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <HAL_UART_MspInit+0x98>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_UART_MspInit+0x98>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a14      	ldr	r2, [pc, #80]	; (8002394 <HAL_UART_MspInit+0x98>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b12      	ldr	r3, [pc, #72]	; (8002394 <HAL_UART_MspInit+0x98>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002356:	230c      	movs	r3, #12
 8002358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002366:	2307      	movs	r3, #7
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	4809      	ldr	r0, [pc, #36]	; (8002398 <HAL_UART_MspInit+0x9c>)
 8002372:	f001 fd01 	bl	8003d78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2026      	movs	r0, #38	; 0x26
 800237c:	f001 f8b5 	bl	80034ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002380:	2026      	movs	r0, #38	; 0x26
 8002382:	f001 f8ce 	bl	8003522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002386:	bf00      	nop
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40004400 	.word	0x40004400
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e8:	f000 f8bc 	bl	8002564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <ADC_IRQHandler+0x10>)
 80023f6:	f000 f9f2 	bl	80027de <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000404 	.word	0x20000404

08002404 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <TIM3_IRQHandler+0x10>)
 800240a:	f002 fb96 	bl	8004b3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	200003c4 	.word	0x200003c4

08002418 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <USART2_IRQHandler+0x10>)
 800241e:	f003 fa45 	bl	80058ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200004ac 	.word	0x200004ac

0800242c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <DMA2_Stream0_IRQHandler+0x10>)
 8002432:	f001 fa37 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	2000044c 	.word	0x2000044c

08002440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <SystemInit+0x28>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <SystemInit+0x28>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SystemInit+0x28>)
 8002456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800245a:	609a      	str	r2, [r3, #8]
#endif
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002472:	e003      	b.n	800247c <LoopCopyDataInit>

08002474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800247a:	3104      	adds	r1, #4

0800247c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800247c:	480b      	ldr	r0, [pc, #44]	; (80024ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002484:	d3f6      	bcc.n	8002474 <CopyDataInit>
  ldr  r2, =_sbss
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002488:	e002      	b.n	8002490 <LoopFillZerobss>

0800248a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800248a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800248c:	f842 3b04 	str.w	r3, [r2], #4

08002490 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002494:	d3f9      	bcc.n	800248a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002496:	f7ff ffd3 	bl	8002440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800249a:	f004 f829 	bl	80064f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800249e:	f7ff fb33 	bl	8001b08 <main>
  bx  lr    
 80024a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024a4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80024a8:	080075d0 	.word	0x080075d0
  ldr  r0, =_sdata
 80024ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024b0:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80024b4:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80024b8:	200004f0 	.word	0x200004f0

080024bc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <DMA1_Stream0_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0d      	ldr	r2, [pc, #52]	; (8002500 <HAL_Init+0x40>)
 80024ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <HAL_Init+0x40>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_Init+0x40>)
 80024d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_Init+0x40>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a07      	ldr	r2, [pc, #28]	; (8002500 <HAL_Init+0x40>)
 80024e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e8:	2003      	movs	r0, #3
 80024ea:	f000 fff3 	bl	80034d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 f808 	bl	8002504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024f4:	f7ff fdfe 	bl	80020f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <HAL_InitTick+0x54>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b12      	ldr	r3, [pc, #72]	; (800255c <HAL_InitTick+0x58>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	fbb3 f3f1 	udiv	r3, r3, r1
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f819 	bl	800355a <HAL_SYSTICK_Config>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e00e      	b.n	8002550 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b0f      	cmp	r3, #15
 8002536:	d80a      	bhi.n	800254e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002538:	2200      	movs	r2, #0
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002540:	f000 ffd3 	bl	80034ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002544:	4a06      	ldr	r2, [pc, #24]	; (8002560 <HAL_InitTick+0x5c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000004 	.word	0x20000004
 800255c:	2000000c 	.word	0x2000000c
 8002560:	20000008 	.word	0x20000008

08002564 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002568:	4b06      	ldr	r3, [pc, #24]	; (8002584 <HAL_IncTick+0x20>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_IncTick+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4413      	add	r3, r2
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_IncTick+0x24>)
 8002576:	6013      	str	r3, [r2, #0]
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000000c 	.word	0x2000000c
 8002588:	200004ec 	.word	0x200004ec

0800258c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return uwTick;
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <HAL_GetTick+0x14>)
 8002592:	681b      	ldr	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200004ec 	.word	0x200004ec

080025a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e033      	b.n	8002622 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff fdbe 	bl	8002144 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ea:	f023 0302 	bic.w	r3, r3, #2
 80025ee:	f043 0202 	orr.w	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fcf0 	bl	8002fdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
 8002612:	e001      	b.n	8002618 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_ADC_Start+0x1a>
 8002642:	2302      	movs	r3, #2
 8002644:	e08a      	b.n	800275c <HAL_ADC_Start+0x130>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b01      	cmp	r3, #1
 800265a:	d018      	beq.n	800268e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 0201 	orr.w	r2, r2, #1
 800266a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800266c:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <HAL_ADC_Start+0x13c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3e      	ldr	r2, [pc, #248]	; (800276c <HAL_ADC_Start+0x140>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	0c9a      	lsrs	r2, r3, #18
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002680:	e002      	b.n	8002688 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3b01      	subs	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f9      	bne.n	8002682 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d15e      	bne.n	800275a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d106      	bne.n	80026ea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f023 0206 	bic.w	r2, r3, #6
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_ADC_Start+0x144>)
 80026fa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002704:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d11c      	bne.n	800275a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e013      	b.n	800275a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_ADC_Start+0x148>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d10e      	bne.n	800275a <HAL_ADC_Start+0x12e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002758:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	20000004 	.word	0x20000004
 800276c:	431bde83 	.word	0x431bde83
 8002770:	40012300 	.word	0x40012300
 8002774:	40012000 	.word	0x40012000

08002778 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_ADC_Stop+0x16>
 800278a:	2302      	movs	r3, #2
 800278c:	e021      	b.n	80027d2 <HAL_ADC_Stop+0x5a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	2b20      	cmp	r3, #32
 8002810:	bf0c      	ite	eq
 8002812:	2301      	moveq	r3, #1
 8002814:	2300      	movne	r3, #0
 8002816:	b2db      	uxtb	r3, r3
 8002818:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d049      	beq.n	80028b4 <HAL_ADC_IRQHandler+0xd6>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d046      	beq.n	80028b4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	d105      	bne.n	800283e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d12b      	bne.n	80028a4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d127      	bne.n	80028a4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d006      	beq.n	8002870 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800286c:	2b00      	cmp	r3, #0
 800286e:	d119      	bne.n	80028a4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0220 	bic.w	r2, r2, #32
 800287e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f9f9 	bl	8002c9c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f06f 0212 	mvn.w	r2, #18
 80028b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b80      	cmp	r3, #128	; 0x80
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d057      	beq.n	8002996 <HAL_ADC_IRQHandler+0x1b8>
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d054      	beq.n	8002996 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d105      	bne.n	8002904 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d139      	bne.n	8002986 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800292a:	2b00      	cmp	r3, #0
 800292c:	d12b      	bne.n	8002986 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002938:	2b00      	cmp	r3, #0
 800293a:	d124      	bne.n	8002986 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11d      	bne.n	8002986 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800294e:	2b00      	cmp	r3, #0
 8002950:	d119      	bne.n	8002986 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002960:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0201 	orr.w	r2, r3, #1
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fca6 	bl	80032d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 020c 	mvn.w	r2, #12
 8002994:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	bf0c      	ite	eq
 80029ba:	2301      	moveq	r3, #1
 80029bc:	2300      	movne	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x21a>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d014      	beq.n	80029f8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10d      	bne.n	80029f8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fe fcb9 	bl	8001360 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f06f 0201 	mvn.w	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1c:	bf0c      	ite	eq
 8002a1e:	2301      	moveq	r3, #1
 8002a20:	2300      	movne	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d015      	beq.n	8002a58 <HAL_ADC_IRQHandler+0x27a>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f043 0202 	orr.w	r2, r3, #2
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f06f 0220 	mvn.w	r2, #32
 8002a46:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f93b 	bl	8002cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f06f 0220 	mvn.w	r2, #32
 8002a56:	601a      	str	r2, [r3, #0]
  }
}
 8002a58:	bf00      	nop
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Start_DMA+0x1e>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0b1      	b.n	8002be2 <HAL_ADC_Start_DMA+0x182>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d018      	beq.n	8002ac6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002aa4:	4b51      	ldr	r3, [pc, #324]	; (8002bec <HAL_ADC_Start_DMA+0x18c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a51      	ldr	r2, [pc, #324]	; (8002bf0 <HAL_ADC_Start_DMA+0x190>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	0c9a      	lsrs	r2, r3, #18
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ab8:	e002      	b.n	8002ac0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	3b01      	subs	r3, #1
 8002abe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f9      	bne.n	8002aba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	f040 8085 	bne.w	8002be0 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ade:	f023 0301 	bic.w	r3, r3, #1
 8002ae2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d007      	beq.n	8002b08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d106      	bne.n	8002b24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1a:	f023 0206 	bic.w	r2, r3, #6
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	645a      	str	r2, [r3, #68]	; 0x44
 8002b22:	e002      	b.n	8002b2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_ADC_Start_DMA+0x194>)
 8002b34:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <HAL_ADC_Start_DMA+0x198>)
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <HAL_ADC_Start_DMA+0x19c>)
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	4a2d      	ldr	r2, [pc, #180]	; (8002c00 <HAL_ADC_Start_DMA+0x1a0>)
 8002b4c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b56:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b66:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b76:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	334c      	adds	r3, #76	; 0x4c
 8002b82:	4619      	mov	r1, r3
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f000 fda2 	bl	80036d0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11c      	bne.n	8002be0 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	e013      	b.n	8002be0 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a11      	ldr	r2, [pc, #68]	; (8002c04 <HAL_ADC_Start_DMA+0x1a4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10e      	bne.n	8002be0 <HAL_ADC_Start_DMA+0x180>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bde:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	431bde83 	.word	0x431bde83
 8002bf4:	40012300 	.word	0x40012300
 8002bf8:	080031d5 	.word	0x080031d5
 8002bfc:	0800328f 	.word	0x0800328f
 8002c00:	080032ab 	.word	0x080032ab
 8002c04:	40012000 	.word	0x40012000

08002c08 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_Stop_DMA+0x1a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e038      	b.n	8002c94 <HAL_ADC_Stop_DMA+0x8c>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d120      	bne.n	8002c8a <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689a      	ldr	r2, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c56:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fd8f 	bl	8003780 <HAL_DMA_Abort>
 8002c62:	4603      	mov	r3, r0
 8002c64:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002c74:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x1c>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	e105      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x228>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d925      	bls.n	8002d50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68d9      	ldr	r1, [r3, #12]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	461a      	mov	r2, r3
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	3b1e      	subs	r3, #30
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	43da      	mvns	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	400a      	ands	r2, r1
 8002d28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68d9      	ldr	r1, [r3, #12]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4403      	add	r3, r0
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	409a      	lsls	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	e022      	b.n	8002d96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4613      	mov	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	4413      	add	r3, r2
 8002d64:	2207      	movs	r2, #7
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	400a      	ands	r2, r1
 8002d72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6919      	ldr	r1, [r3, #16]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4403      	add	r3, r0
 8002d8c:	409a      	lsls	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d824      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b05      	subs	r3, #5
 8002db0:	221f      	movs	r2, #31
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b05      	subs	r3, #5
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	635a      	str	r2, [r3, #52]	; 0x34
 8002de6:	e04c      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d824      	bhi.n	8002e3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	3b23      	subs	r3, #35	; 0x23
 8002e02:	221f      	movs	r2, #31
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	400a      	ands	r2, r1
 8002e10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	4618      	mov	r0, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	3b23      	subs	r3, #35	; 0x23
 8002e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
 8002e38:	e023      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b41      	subs	r3, #65	; 0x41
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b41      	subs	r3, #65	; 0x41
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e82:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <HAL_ADC_ConfigChannel+0x234>)
 8002e84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a21      	ldr	r2, [pc, #132]	; (8002f10 <HAL_ADC_ConfigChannel+0x238>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d109      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1cc>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b12      	cmp	r3, #18
 8002e96:	d105      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_ADC_ConfigChannel+0x238>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d123      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x21e>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d003      	beq.n	8002ebe <HAL_ADC_ConfigChannel+0x1e6>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b11      	cmp	r3, #17
 8002ebc:	d11b      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b10      	cmp	r3, #16
 8002ed0:	d111      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed2:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_ADC_ConfigChannel+0x23c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a10      	ldr	r2, [pc, #64]	; (8002f18 <HAL_ADC_ConfigChannel+0x240>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	0c9a      	lsrs	r2, r3, #18
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee8:	e002      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f9      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40012300 	.word	0x40012300
 8002f10:	40012000 	.word	0x40012000
 8002f14:	20000004 	.word	0x20000004
 8002f18:	431bde83 	.word	0x431bde83

08002f1c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_AnalogWDGConfig+0x18>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e04d      	b.n	8002fd0 <HAL_ADC_AnalogWDGConfig+0xb4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	7c1b      	ldrb	r3, [r3, #16]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d108      	bne.n	8002f56 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	e007      	b.n	8002f66 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f64:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f78:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6852      	ldr	r2, [r2, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	6892      	ldr	r2, [r2, #8]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 021f 	bic.w	r2, r2, #31
 8002fae:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <ADC_Init+0x1f0>)
 8002fe6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6859      	ldr	r1, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	021a      	lsls	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689a      	ldr	r2, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306e:	4a58      	ldr	r2, [pc, #352]	; (80031d0 <ADC_Init+0x1f4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6899      	ldr	r1, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6899      	ldr	r1, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
 80030b8:	e00f      	b.n	80030da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0202 	bic.w	r2, r2, #2
 80030e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7e1b      	ldrb	r3, [r3, #24]
 80030f4:	005a      	lsls	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d01b      	beq.n	8003140 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003116:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003126:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6859      	ldr	r1, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	3b01      	subs	r3, #1
 8003134:	035a      	lsls	r2, r3, #13
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	e007      	b.n	8003150 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800314e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	3b01      	subs	r3, #1
 800316c:	051a      	lsls	r2, r3, #20
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003192:	025a      	lsls	r2, r3, #9
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	029a      	lsls	r2, r3, #10
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	40012300 	.word	0x40012300
 80031d0:	0f000001 	.word	0x0f000001

080031d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d13c      	bne.n	8003268 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d12b      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800320c:	2b00      	cmp	r3, #0
 800320e:	d127      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003228:	2b00      	cmp	r3, #0
 800322a:	d119      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0220 	bic.w	r2, r2, #32
 800323a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	f043 0201 	orr.w	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f7ff fd1b 	bl	8002c9c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003266:	e00e      	b.n	8003286 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d003      	beq.n	800327c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff fd25 	bl	8002cc4 <HAL_ADC_ErrorCallback>
}
 800327a:	e004      	b.n	8003286 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f7ff fd07 	bl	8002cb0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b084      	sub	sp, #16
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f043 0204 	orr.w	r2, r3, #4
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fcfa 	bl	8002cc4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003308:	4013      	ands	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331e:	4a04      	ldr	r2, [pc, #16]	; (8003330 <__NVIC_SetPriorityGrouping+0x44>)
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	60d3      	str	r3, [r2, #12]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003338:	4b04      	ldr	r3, [pc, #16]	; (800334c <__NVIC_GetPriorityGrouping+0x18>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	f003 0307 	and.w	r3, r3, #7
}
 8003342:	4618      	mov	r0, r3
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	2b00      	cmp	r3, #0
 8003360:	db0b      	blt.n	800337a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	f003 021f 	and.w	r2, r3, #31
 8003368:	4907      	ldr	r1, [pc, #28]	; (8003388 <__NVIC_EnableIRQ+0x38>)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	2001      	movs	r0, #1
 8003372:	fa00 f202 	lsl.w	r2, r0, r2
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000e100 	.word	0xe000e100

0800338c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	2b00      	cmp	r3, #0
 800339c:	db12      	blt.n	80033c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	f003 021f 	and.w	r2, r3, #31
 80033a4:	490a      	ldr	r1, [pc, #40]	; (80033d0 <__NVIC_DisableIRQ+0x44>)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	095b      	lsrs	r3, r3, #5
 80033ac:	2001      	movs	r0, #1
 80033ae:	fa00 f202 	lsl.w	r2, r0, r2
 80033b2:	3320      	adds	r3, #32
 80033b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80033b8:	f3bf 8f4f 	dsb	sy
}
 80033bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80033be:	f3bf 8f6f 	isb	sy
}
 80033c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000e100 	.word	0xe000e100

080033d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	6039      	str	r1, [r7, #0]
 80033de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db0a      	blt.n	80033fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	490c      	ldr	r1, [pc, #48]	; (8003420 <__NVIC_SetPriority+0x4c>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	b2d2      	uxtb	r2, r2
 80033f6:	440b      	add	r3, r1
 80033f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033fc:	e00a      	b.n	8003414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	4908      	ldr	r1, [pc, #32]	; (8003424 <__NVIC_SetPriority+0x50>)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	3b04      	subs	r3, #4
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	440b      	add	r3, r1
 8003412:	761a      	strb	r2, [r3, #24]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003428:	b480      	push	{r7}
 800342a:	b089      	sub	sp, #36	; 0x24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f1c3 0307 	rsb	r3, r3, #7
 8003442:	2b04      	cmp	r3, #4
 8003444:	bf28      	it	cs
 8003446:	2304      	movcs	r3, #4
 8003448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	3304      	adds	r3, #4
 800344e:	2b06      	cmp	r3, #6
 8003450:	d902      	bls.n	8003458 <NVIC_EncodePriority+0x30>
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3b03      	subs	r3, #3
 8003456:	e000      	b.n	800345a <NVIC_EncodePriority+0x32>
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800345c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	401a      	ands	r2, r3
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	fa01 f303 	lsl.w	r3, r1, r3
 800347a:	43d9      	mvns	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003480:	4313      	orrs	r3, r2
         );
}
 8003482:	4618      	mov	r0, r3
 8003484:	3724      	adds	r7, #36	; 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3b01      	subs	r3, #1
 800349c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a0:	d301      	bcc.n	80034a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a2:	2301      	movs	r3, #1
 80034a4:	e00f      	b.n	80034c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034a6:	4a0a      	ldr	r2, [pc, #40]	; (80034d0 <SysTick_Config+0x40>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ae:	210f      	movs	r1, #15
 80034b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034b4:	f7ff ff8e 	bl	80033d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <SysTick_Config+0x40>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034be:	4b04      	ldr	r3, [pc, #16]	; (80034d0 <SysTick_Config+0x40>)
 80034c0:	2207      	movs	r2, #7
 80034c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff05 	bl	80032ec <__NVIC_SetPriorityGrouping>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b086      	sub	sp, #24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034fc:	f7ff ff1a 	bl	8003334 <__NVIC_GetPriorityGrouping>
 8003500:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	6978      	ldr	r0, [r7, #20]
 8003508:	f7ff ff8e 	bl	8003428 <NVIC_EncodePriority>
 800350c:	4602      	mov	r2, r0
 800350e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ff5d 	bl	80033d4 <__NVIC_SetPriority>
}
 800351a:	bf00      	nop
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800352c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff0d 	bl	8003350 <__NVIC_EnableIRQ>
}
 8003536:	bf00      	nop
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	4603      	mov	r3, r0
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff1d 	bl	800338c <__NVIC_DisableIRQ>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff94 	bl	8003490 <SysTick_Config>
 8003568:	4603      	mov	r3, r0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003580:	f7ff f804 	bl	800258c <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e099      	b.n	80036c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b0:	e00f      	b.n	80035d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035b2:	f7fe ffeb 	bl	800258c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d908      	bls.n	80035d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2203      	movs	r2, #3
 80035ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e078      	b.n	80036c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e8      	bne.n	80035b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4b38      	ldr	r3, [pc, #224]	; (80036cc <HAL_DMA_Init+0x158>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2b04      	cmp	r3, #4
 800362a:	d107      	bne.n	800363c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003634:	4313      	orrs	r3, r2
 8003636:	697a      	ldr	r2, [r7, #20]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0307 	bic.w	r3, r3, #7
 8003652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003662:	2b04      	cmp	r3, #4
 8003664:	d117      	bne.n	8003696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb01 	bl	8003c80 <DMA_CheckFifoParam>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2240      	movs	r2, #64	; 0x40
 8003688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003692:	2301      	movs	r3, #1
 8003694:	e016      	b.n	80036c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fab8 	bl	8003c14 <DMA_CalcBaseAndBitshift>
 80036a4:	4603      	mov	r3, r0
 80036a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	223f      	movs	r2, #63	; 0x3f
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3718      	adds	r7, #24
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	f010803f 	.word	0xf010803f

080036d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_DMA_Start_IT+0x26>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e040      	b.n	8003778 <HAL_DMA_Start_IT+0xa8>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d12f      	bne.n	800376a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2202      	movs	r2, #2
 800370e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	68b9      	ldr	r1, [r7, #8]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa4a 	bl	8003bb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	223f      	movs	r2, #63	; 0x3f
 800372a:	409a      	lsls	r2, r3
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0216 	orr.w	r2, r2, #22
 800373e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d007      	beq.n	8003758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0208 	orr.w	r2, r2, #8
 8003756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	e005      	b.n	8003776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003776:	7dfb      	ldrb	r3, [r7, #23]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800378e:	f7fe fefd 	bl	800258c <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d008      	beq.n	80037b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e052      	b.n	8003858 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0216 	bic.w	r2, r2, #22
 80037c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695a      	ldr	r2, [r3, #20]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d103      	bne.n	80037e2 <HAL_DMA_Abort+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0208 	bic.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003802:	e013      	b.n	800382c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003804:	f7fe fec2 	bl	800258c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b05      	cmp	r3, #5
 8003810:	d90c      	bls.n	800382c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2203      	movs	r2, #3
 8003824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e015      	b.n	8003858 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1e4      	bne.n	8003804 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	223f      	movs	r2, #63	; 0x3f
 8003840:	409a      	lsls	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d004      	beq.n	800387e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e00c      	b.n	8003898 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2205      	movs	r2, #5
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038b0:	4b92      	ldr	r3, [pc, #584]	; (8003afc <HAL_DMA_IRQHandler+0x258>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a92      	ldr	r2, [pc, #584]	; (8003b00 <HAL_DMA_IRQHandler+0x25c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ce:	2208      	movs	r2, #8
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01a      	beq.n	8003910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fc:	2208      	movs	r2, #8
 80038fe:	409a      	lsls	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2204      	movs	r2, #4
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d012      	beq.n	800397c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	2204      	movs	r2, #4
 800396a:	409a      	lsls	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2210      	movs	r2, #16
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d043      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03c      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399e:	2210      	movs	r2, #16
 80039a0:	409a      	lsls	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d024      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	e01f      	b.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e016      	b.n	8003a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0208 	bic.w	r2, r2, #8
 8003a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2220      	movs	r2, #32
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 808e 	beq.w	8003b42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8086 	beq.w	8003b42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d136      	bne.n	8003abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0216 	bic.w	r2, r2, #22
 8003a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x1da>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0208 	bic.w	r2, r2, #8
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	223f      	movs	r2, #63	; 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d07d      	beq.n	8003bae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
        }
        return;
 8003aba:	e078      	b.n	8003bae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d108      	bne.n	8003aea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d030      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e02b      	b.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d027      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	4798      	blx	r3
 8003afa:	e022      	b.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
 8003afc:	20000004 	.word	0x20000004
 8003b00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10f      	bne.n	8003b32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0210 	bic.w	r2, r2, #16
 8003b20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d032      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d022      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2205      	movs	r2, #5
 8003b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d307      	bcc.n	8003b8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f2      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x2ca>
 8003b88:	e000      	b.n	8003b8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
 8003bac:	e000      	b.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003bae:	bf00      	nop
    }
  }
}
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop

08003bb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d108      	bne.n	8003bf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bf6:	e007      	b.n	8003c08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	3b10      	subs	r3, #16
 8003c24:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <DMA_CalcBaseAndBitshift+0x64>)
 8003c26:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c2e:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <DMA_CalcBaseAndBitshift+0x68>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b03      	cmp	r3, #3
 8003c40:	d909      	bls.n	8003c56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c4a:	f023 0303 	bic.w	r3, r3, #3
 8003c4e:	1d1a      	adds	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	659a      	str	r2, [r3, #88]	; 0x58
 8003c54:	e007      	b.n	8003c66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c5e:	f023 0303 	bic.w	r3, r3, #3
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	aaaaaaab 	.word	0xaaaaaaab
 8003c7c:	08007570 	.word	0x08007570

08003c80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d11f      	bne.n	8003cda <DMA_CheckFifoParam+0x5a>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d856      	bhi.n	8003d4e <DMA_CheckFifoParam+0xce>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <DMA_CheckFifoParam+0x28>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003ccb 	.word	0x08003ccb
 8003cb0:	08003cb9 	.word	0x08003cb9
 8003cb4:	08003d4f 	.word	0x08003d4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d046      	beq.n	8003d52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc8:	e043      	b.n	8003d52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cd2:	d140      	bne.n	8003d56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd8:	e03d      	b.n	8003d56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce2:	d121      	bne.n	8003d28 <DMA_CheckFifoParam+0xa8>
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d837      	bhi.n	8003d5a <DMA_CheckFifoParam+0xda>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <DMA_CheckFifoParam+0x70>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d01 	.word	0x08003d01
 8003cf4:	08003d07 	.word	0x08003d07
 8003cf8:	08003d01 	.word	0x08003d01
 8003cfc:	08003d19 	.word	0x08003d19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
      break;
 8003d04:	e030      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d025      	beq.n	8003d5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d16:	e022      	b.n	8003d5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d20:	d11f      	bne.n	8003d62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d26:	e01c      	b.n	8003d62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d903      	bls.n	8003d36 <DMA_CheckFifoParam+0xb6>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d003      	beq.n	8003d3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d34:	e018      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	73fb      	strb	r3, [r7, #15]
      break;
 8003d3a:	e015      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00e      	beq.n	8003d66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d4c:	e00b      	b.n	8003d66 <DMA_CheckFifoParam+0xe6>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e00a      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
 8003d54:	e008      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d56:	bf00      	nop
 8003d58:	e006      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5a:	bf00      	nop
 8003d5c:	e004      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
 8003d60:	e002      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <DMA_CheckFifoParam+0xe8>
      break;
 8003d66:	bf00      	nop
    }
  } 
  
  return status; 
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop

08003d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	; 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	e159      	b.n	8004048 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d94:	2201      	movs	r2, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	f040 8148 	bne.w	8004042 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d00b      	beq.n	8003dd2 <HAL_GPIO_Init+0x5a>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d007      	beq.n	8003dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dc6:	2b11      	cmp	r3, #17
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b12      	cmp	r3, #18
 8003dd0:	d130      	bne.n	8003e34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2203      	movs	r2, #3
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 0201 	and.w	r2, r3, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	2203      	movs	r2, #3
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	43db      	mvns	r3, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0xfc>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d123      	bne.n	8003ebc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	08da      	lsrs	r2, r3, #3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3208      	adds	r2, #8
 8003e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	220f      	movs	r2, #15
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4013      	ands	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	08da      	lsrs	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3208      	adds	r2, #8
 8003eb6:	69b9      	ldr	r1, [r7, #24]
 8003eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0203 	and.w	r2, r3, #3
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a2 	beq.w	8004042 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	4b57      	ldr	r3, [pc, #348]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	4a56      	ldr	r2, [pc, #344]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0e:	4b54      	ldr	r3, [pc, #336]	; (8004060 <HAL_GPIO_Init+0x2e8>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f1a:	4a52      	ldr	r2, [pc, #328]	; (8004064 <HAL_GPIO_Init+0x2ec>)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	3302      	adds	r3, #2
 8003f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	220f      	movs	r2, #15
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43db      	mvns	r3, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_GPIO_Init+0x2f0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d019      	beq.n	8003f7a <HAL_GPIO_Init+0x202>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a48      	ldr	r2, [pc, #288]	; (800406c <HAL_GPIO_Init+0x2f4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_GPIO_Init+0x1fe>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_GPIO_Init+0x2f8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00d      	beq.n	8003f72 <HAL_GPIO_Init+0x1fa>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a46      	ldr	r2, [pc, #280]	; (8004074 <HAL_GPIO_Init+0x2fc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <HAL_GPIO_Init+0x1f6>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a45      	ldr	r2, [pc, #276]	; (8004078 <HAL_GPIO_Init+0x300>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d101      	bne.n	8003f6a <HAL_GPIO_Init+0x1f2>
 8003f66:	2304      	movs	r3, #4
 8003f68:	e008      	b.n	8003f7c <HAL_GPIO_Init+0x204>
 8003f6a:	2307      	movs	r3, #7
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_Init+0x204>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e004      	b.n	8003f7c <HAL_GPIO_Init+0x204>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_Init+0x204>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_Init+0x204>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	69fa      	ldr	r2, [r7, #28]
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	4093      	lsls	r3, r2
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f8c:	4935      	ldr	r1, [pc, #212]	; (8004064 <HAL_GPIO_Init+0x2ec>)
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <HAL_GPIO_Init+0x304>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	; (800407c <HAL_GPIO_Init+0x304>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fc4:	4b2d      	ldr	r3, [pc, #180]	; (800407c <HAL_GPIO_Init+0x304>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fe8:	4a24      	ldr	r2, [pc, #144]	; (800407c <HAL_GPIO_Init+0x304>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fee:	4b23      	ldr	r3, [pc, #140]	; (800407c <HAL_GPIO_Init+0x304>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004012:	4a1a      	ldr	r2, [pc, #104]	; (800407c <HAL_GPIO_Init+0x304>)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004018:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_GPIO_Init+0x304>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4313      	orrs	r3, r2
 800403a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800403c:	4a0f      	ldr	r2, [pc, #60]	; (800407c <HAL_GPIO_Init+0x304>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3301      	adds	r3, #1
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b0f      	cmp	r3, #15
 800404c:	f67f aea2 	bls.w	8003d94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3724      	adds	r7, #36	; 0x24
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	40013800 	.word	0x40013800
 8004068:	40020000 	.word	0x40020000
 800406c:	40020400 	.word	0x40020400
 8004070:	40020800 	.word	0x40020800
 8004074:	40020c00 	.word	0x40020c00
 8004078:	40021000 	.word	0x40021000
 800407c:	40013c00 	.word	0x40013c00

08004080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
 800408c:	4613      	mov	r3, r2
 800408e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004090:	787b      	ldrb	r3, [r7, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800409c:	e003      	b.n	80040a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800409e:	887b      	ldrh	r3, [r7, #2]
 80040a0:	041a      	lsls	r2, r3, #16
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	619a      	str	r2, [r3, #24]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e25b      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d075      	beq.n	80041be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d2:	4ba3      	ldr	r3, [pc, #652]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	2b04      	cmp	r3, #4
 80040dc:	d00c      	beq.n	80040f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040de:	4ba0      	ldr	r3, [pc, #640]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d112      	bne.n	8004110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ea:	4b9d      	ldr	r3, [pc, #628]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040f6:	d10b      	bne.n	8004110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	4b99      	ldr	r3, [pc, #612]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d05b      	beq.n	80041bc <HAL_RCC_OscConfig+0x108>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d157      	bne.n	80041bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e236      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004118:	d106      	bne.n	8004128 <HAL_RCC_OscConfig+0x74>
 800411a:	4b91      	ldr	r3, [pc, #580]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a90      	ldr	r2, [pc, #576]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004124:	6013      	str	r3, [r2, #0]
 8004126:	e01d      	b.n	8004164 <HAL_RCC_OscConfig+0xb0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x98>
 8004132:	4b8b      	ldr	r3, [pc, #556]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a8a      	ldr	r2, [pc, #552]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	4b88      	ldr	r3, [pc, #544]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a87      	ldr	r2, [pc, #540]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e00b      	b.n	8004164 <HAL_RCC_OscConfig+0xb0>
 800414c:	4b84      	ldr	r3, [pc, #528]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a83      	ldr	r2, [pc, #524]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b81      	ldr	r3, [pc, #516]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a80      	ldr	r2, [pc, #512]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 800415e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d013      	beq.n	8004194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe fa0e 	bl	800258c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004174:	f7fe fa0a 	bl	800258c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b64      	cmp	r3, #100	; 0x64
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e1fb      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b76      	ldr	r3, [pc, #472]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0xc0>
 8004192:	e014      	b.n	80041be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe f9fa 	bl	800258c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe f9f6 	bl	800258c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e1e7      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ae:	4b6c      	ldr	r3, [pc, #432]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1f0      	bne.n	800419c <HAL_RCC_OscConfig+0xe8>
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d063      	beq.n	8004292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ca:	4b65      	ldr	r3, [pc, #404]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d6:	4b62      	ldr	r3, [pc, #392]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d11c      	bne.n	800421c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e2:	4b5f      	ldr	r3, [pc, #380]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d116      	bne.n	800421c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	4b5c      	ldr	r3, [pc, #368]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_RCC_OscConfig+0x152>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d001      	beq.n	8004206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e1bb      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004206:	4b56      	ldr	r3, [pc, #344]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4952      	ldr	r1, [pc, #328]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004216:	4313      	orrs	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421a:	e03a      	b.n	8004292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004224:	4b4f      	ldr	r3, [pc, #316]	; (8004364 <HAL_RCC_OscConfig+0x2b0>)
 8004226:	2201      	movs	r2, #1
 8004228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422a:	f7fe f9af 	bl	800258c <HAL_GetTick>
 800422e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004230:	e008      	b.n	8004244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004232:	f7fe f9ab 	bl	800258c <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	2b02      	cmp	r3, #2
 800423e:	d901      	bls.n	8004244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e19c      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004244:	4b46      	ldr	r3, [pc, #280]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0f0      	beq.n	8004232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004250:	4b43      	ldr	r3, [pc, #268]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4940      	ldr	r1, [pc, #256]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004260:	4313      	orrs	r3, r2
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	e015      	b.n	8004292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004266:	4b3f      	ldr	r3, [pc, #252]	; (8004364 <HAL_RCC_OscConfig+0x2b0>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426c:	f7fe f98e 	bl	800258c <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004272:	e008      	b.n	8004286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004274:	f7fe f98a 	bl	800258c <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	2b02      	cmp	r3, #2
 8004280:	d901      	bls.n	8004286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e17b      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004286:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1f0      	bne.n	8004274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d030      	beq.n	8004300 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d016      	beq.n	80042d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a6:	4b30      	ldr	r3, [pc, #192]	; (8004368 <HAL_RCC_OscConfig+0x2b4>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe f96e 	bl	800258c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fe f96a 	bl	800258c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e15b      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c6:	4b26      	ldr	r3, [pc, #152]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0f0      	beq.n	80042b4 <HAL_RCC_OscConfig+0x200>
 80042d2:	e015      	b.n	8004300 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_OscConfig+0x2b4>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042da:	f7fe f957 	bl	800258c <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e2:	f7fe f953 	bl	800258c <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e144      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f4:	4b1a      	ldr	r3, [pc, #104]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1f0      	bne.n	80042e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 80a0 	beq.w	800444e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a0e      	ldr	r2, [pc, #56]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
 800432e:	4b0c      	ldr	r3, [pc, #48]	; (8004360 <HAL_RCC_OscConfig+0x2ac>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433a:	2301      	movs	r3, #1
 800433c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_OscConfig+0x2b8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004346:	2b00      	cmp	r3, #0
 8004348:	d121      	bne.n	800438e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <HAL_RCC_OscConfig+0x2b8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a07      	ldr	r2, [pc, #28]	; (800436c <HAL_RCC_OscConfig+0x2b8>)
 8004350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004356:	f7fe f919 	bl	800258c <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	e011      	b.n	8004382 <HAL_RCC_OscConfig+0x2ce>
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	42470000 	.word	0x42470000
 8004368:	42470e80 	.word	0x42470e80
 800436c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004370:	f7fe f90c 	bl	800258c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e0fd      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x4d4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2f0>
 8004396:	4b7d      	ldr	r3, [pc, #500]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a7c      	ldr	r2, [pc, #496]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	e01c      	b.n	80043de <HAL_RCC_OscConfig+0x32a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x312>
 80043ac:	4b77      	ldr	r3, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	4a76      	ldr	r2, [pc, #472]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	6713      	str	r3, [r2, #112]	; 0x70
 80043b8:	4b74      	ldr	r3, [pc, #464]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043bc:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	6713      	str	r3, [r2, #112]	; 0x70
 80043c4:	e00b      	b.n	80043de <HAL_RCC_OscConfig+0x32a>
 80043c6:	4b71      	ldr	r3, [pc, #452]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ca:	4a70      	ldr	r2, [pc, #448]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6713      	str	r3, [r2, #112]	; 0x70
 80043d2:	4b6e      	ldr	r3, [pc, #440]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	4a6d      	ldr	r2, [pc, #436]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80043d8:	f023 0304 	bic.w	r3, r3, #4
 80043dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d015      	beq.n	8004412 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fe f8d1 	bl	800258c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe f8cd 	bl	800258c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0bc      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	4b61      	ldr	r3, [pc, #388]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0ee      	beq.n	80043ee <HAL_RCC_OscConfig+0x33a>
 8004410:	e014      	b.n	800443c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fe f8bb 	bl	800258c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fe f8b7 	bl	800258c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e0a6      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004430:	4b56      	ldr	r3, [pc, #344]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ee      	bne.n	800441a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443c:	7dfb      	ldrb	r3, [r7, #23]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d105      	bne.n	800444e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b52      	ldr	r3, [pc, #328]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	4a51      	ldr	r2, [pc, #324]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 8004448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 8092 	beq.w	800457c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004458:	4b4c      	ldr	r3, [pc, #304]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b08      	cmp	r3, #8
 8004462:	d05c      	beq.n	800451e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	2b02      	cmp	r3, #2
 800446a:	d141      	bne.n	80044f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b48      	ldr	r3, [pc, #288]	; (8004590 <HAL_RCC_OscConfig+0x4dc>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004472:	f7fe f88b 	bl	800258c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800447a:	f7fe f887 	bl	800258c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e078      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448c:	4b3f      	ldr	r3, [pc, #252]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f0      	bne.n	800447a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	019b      	lsls	r3, r3, #6
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	041b      	lsls	r3, r3, #16
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	4933      	ldr	r1, [pc, #204]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c2:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCC_OscConfig+0x4dc>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c8:	f7fe f860 	bl	800258c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fe f85c 	bl	800258c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e04d      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e2:	4b2a      	ldr	r3, [pc, #168]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x41c>
 80044ee:	e045      	b.n	800457c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f0:	4b27      	ldr	r3, [pc, #156]	; (8004590 <HAL_RCC_OscConfig+0x4dc>)
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fe f849 	bl	800258c <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fe:	f7fe f845 	bl	800258c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e036      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <HAL_RCC_OscConfig+0x44a>
 800451c:	e02e      	b.n	800457c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e029      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800452a:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_RCC_OscConfig+0x4d8>)
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d11c      	bne.n	8004578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d115      	bne.n	8004578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004552:	4013      	ands	r3, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004558:	4293      	cmp	r3, r2
 800455a:	d10d      	bne.n	8004578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40007000 	.word	0x40007000
 800458c:	40023800 	.word	0x40023800
 8004590:	42470060 	.word	0x42470060

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cc      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b68      	ldr	r3, [pc, #416]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d90c      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b8      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800460a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	494d      	ldr	r1, [pc, #308]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d044      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d119      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d003      	beq.n	8004652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	2b03      	cmp	r3, #3
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e067      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004672:	4b37      	ldr	r3, [pc, #220]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4934      	ldr	r1, [pc, #208]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004684:	f7fd ff82 	bl	800258c <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fd ff7e 	bl	800258c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e04f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 020c 	and.w	r2, r3, #12
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1eb      	bne.n	800468c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20c      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e032      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4916      	ldr	r1, [pc, #88]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	490e      	ldr	r1, [pc, #56]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800471a:	f000 f821 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	490a      	ldr	r1, [pc, #40]	; (8004754 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a09      	ldr	r2, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd fee2 	bl	8002504 <HAL_InitTick>

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023c00 	.word	0x40023c00
 8004750:	40023800 	.word	0x40023800
 8004754:	08007558 	.word	0x08007558
 8004758:	20000004 	.word	0x20000004
 800475c:	20000008 	.word	0x20000008

08004760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	b5b0      	push	{r4, r5, r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004766:	2100      	movs	r1, #0
 8004768:	6079      	str	r1, [r7, #4]
 800476a:	2100      	movs	r1, #0
 800476c:	60f9      	str	r1, [r7, #12]
 800476e:	2100      	movs	r1, #0
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004772:	2100      	movs	r1, #0
 8004774:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004776:	4952      	ldr	r1, [pc, #328]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004778:	6889      	ldr	r1, [r1, #8]
 800477a:	f001 010c 	and.w	r1, r1, #12
 800477e:	2908      	cmp	r1, #8
 8004780:	d00d      	beq.n	800479e <HAL_RCC_GetSysClockFreq+0x3e>
 8004782:	2908      	cmp	r1, #8
 8004784:	f200 8094 	bhi.w	80048b0 <HAL_RCC_GetSysClockFreq+0x150>
 8004788:	2900      	cmp	r1, #0
 800478a:	d002      	beq.n	8004792 <HAL_RCC_GetSysClockFreq+0x32>
 800478c:	2904      	cmp	r1, #4
 800478e:	d003      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x38>
 8004790:	e08e      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004792:	4b4c      	ldr	r3, [pc, #304]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004794:	60bb      	str	r3, [r7, #8]
       break;
 8004796:	e08e      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004798:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 800479a:	60bb      	str	r3, [r7, #8]
      break;
 800479c:	e08b      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800479e:	4948      	ldr	r1, [pc, #288]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80047a0:	6849      	ldr	r1, [r1, #4]
 80047a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80047a6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047a8:	4945      	ldr	r1, [pc, #276]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80047aa:	6849      	ldr	r1, [r1, #4]
 80047ac:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80047b0:	2900      	cmp	r1, #0
 80047b2:	d024      	beq.n	80047fe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b4:	4942      	ldr	r1, [pc, #264]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80047b6:	6849      	ldr	r1, [r1, #4]
 80047b8:	0989      	lsrs	r1, r1, #6
 80047ba:	4608      	mov	r0, r1
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80047c4:	f04f 0500 	mov.w	r5, #0
 80047c8:	ea00 0204 	and.w	r2, r0, r4
 80047cc:	ea01 0305 	and.w	r3, r1, r5
 80047d0:	493d      	ldr	r1, [pc, #244]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80047d2:	fb01 f003 	mul.w	r0, r1, r3
 80047d6:	2100      	movs	r1, #0
 80047d8:	fb01 f102 	mul.w	r1, r1, r2
 80047dc:	1844      	adds	r4, r0, r1
 80047de:	493a      	ldr	r1, [pc, #232]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x168>)
 80047e0:	fba2 0101 	umull	r0, r1, r2, r1
 80047e4:	1863      	adds	r3, r4, r1
 80047e6:	4619      	mov	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	461a      	mov	r2, r3
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	f7fc f9f6 	bl	8000be0 <__aeabi_uldivmod>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4613      	mov	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e04a      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fe:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	461a      	mov	r2, r3
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	ea02 0400 	and.w	r4, r2, r0
 8004816:	ea03 0501 	and.w	r5, r3, r1
 800481a:	4620      	mov	r0, r4
 800481c:	4629      	mov	r1, r5
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	014b      	lsls	r3, r1, #5
 8004828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800482c:	0142      	lsls	r2, r0, #5
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	1b00      	subs	r0, r0, r4
 8004834:	eb61 0105 	sbc.w	r1, r1, r5
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	018b      	lsls	r3, r1, #6
 8004842:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004846:	0182      	lsls	r2, r0, #6
 8004848:	1a12      	subs	r2, r2, r0
 800484a:	eb63 0301 	sbc.w	r3, r3, r1
 800484e:	f04f 0000 	mov.w	r0, #0
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	00d9      	lsls	r1, r3, #3
 8004858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800485c:	00d0      	lsls	r0, r2, #3
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	1912      	adds	r2, r2, r4
 8004864:	eb45 0303 	adc.w	r3, r5, r3
 8004868:	f04f 0000 	mov.w	r0, #0
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	0299      	lsls	r1, r3, #10
 8004872:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004876:	0290      	lsls	r0, r2, #10
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4610      	mov	r0, r2
 800487e:	4619      	mov	r1, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	461a      	mov	r2, r3
 8004884:	f04f 0300 	mov.w	r3, #0
 8004888:	f7fc f9aa 	bl	8000be0 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4613      	mov	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004894:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	f003 0303 	and.w	r3, r3, #3
 800489e:	3301      	adds	r3, #1
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	60bb      	str	r3, [r7, #8]
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x164>)
 80048b2:	60bb      	str	r3, [r7, #8]
      break;
 80048b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b6:	68bb      	ldr	r3, [r7, #8]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bdb0      	pop	{r4, r5, r7, pc}
 80048c0:	40023800 	.word	0x40023800
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	017d7840 	.word	0x017d7840

080048cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000004 	.word	0x20000004

080048e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e8:	f7ff fff0 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 80048ec:	4602      	mov	r2, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0a9b      	lsrs	r3, r3, #10
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4903      	ldr	r1, [pc, #12]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fa:	5ccb      	ldrb	r3, [r1, r3]
 80048fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	08007568 	.word	0x08007568

0800490c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004910:	f7ff ffdc 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8004914:	4602      	mov	r2, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0b5b      	lsrs	r3, r3, #13
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4903      	ldr	r1, [pc, #12]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004922:	5ccb      	ldrb	r3, [r1, r3]
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	08007568 	.word	0x08007568

08004934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e01d      	b.n	8004982 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd fc8c 	bl	8002278 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fb36 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <HAL_TIM_Base_DeInit+0x40>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1a      	ldr	r2, [r3, #32]
 80049b0:	f240 4344 	movw	r3, #1092	; 0x444
 80049b4:	4013      	ands	r3, r2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_Base_DeInit+0x40>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 0201 	bic.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fd fc7c 	bl	80022c8 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2b06      	cmp	r3, #6
 8004a0a:	d007      	beq.n	8004a1c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f042 0201 	orr.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10f      	bne.n	8004a72 <HAL_TIM_Base_Stop+0x40>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	f240 4344 	movw	r3, #1092	; 0x444
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d107      	bne.n	8004a72 <HAL_TIM_Base_Stop+0x40>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2b06      	cmp	r3, #6
 8004ab0:	d007      	beq.n	8004ac2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f042 0201 	orr.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01d      	b.n	8004b1e <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f815 	bl	8004b26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f000 fa68 	bl	8004fe4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b082      	sub	sp, #8
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d122      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d11b      	bne.n	8004b96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa13 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004b82:	e005      	b.n	8004b90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa05 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 fa16 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d122      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d11b      	bne.n	8004bea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f06f 0204 	mvn.w	r2, #4
 8004bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f9e9 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004bd6:	e005      	b.n	8004be4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9db 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f9ec 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d122      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d11b      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0208 	mvn.w	r2, #8
 8004c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2204      	movs	r2, #4
 8004c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f9bf 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004c2a:	e005      	b.n	8004c38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f9b1 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9c2 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d122      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d11b      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f06f 0210 	mvn.w	r2, #16
 8004c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2208      	movs	r2, #8
 8004c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f995 	bl	8004fa8 <HAL_TIM_IC_CaptureCallback>
 8004c7e:	e005      	b.n	8004c8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f987 	bl	8004f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f998 	bl	8004fbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d10e      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f06f 0201 	mvn.w	r2, #1
 8004cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fc fc1f 	bl	80014fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d10e      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b80      	cmp	r3, #128	; 0x80
 8004cd8:	d107      	bne.n	8004cea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fc9b 	bl	8005620 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d10e      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d107      	bne.n	8004d16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f95d 	bl	8004fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d10e      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	d107      	bne.n	8004d42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f06f 0220 	mvn.w	r2, #32
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fc65 	bl	800560c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_OC_ConfigChannel+0x1a>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e04e      	b.n	8004e04 <HAL_TIM_OC_ConfigChannel+0xb8>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2202      	movs	r2, #2
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d839      	bhi.n	8004df0 <HAL_TIM_OC_ConfigChannel+0xa4>
 8004d7c:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <HAL_TIM_OC_ConfigChannel+0x38>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004db9 	.word	0x08004db9
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004df1 	.word	0x08004df1
 8004d94:	08004dc7 	.word	0x08004dc7
 8004d98:	08004df1 	.word	0x08004df1
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004dd5 	.word	0x08004dd5
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004df1 	.word	0x08004df1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004de3 	.word	0x08004de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68b9      	ldr	r1, [r7, #8]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f990 	bl	80050e4 <TIM_OC1_SetConfig>
      break;
 8004dc4:	e015      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f9ef 	bl	80051b0 <TIM_OC2_SetConfig>
      break;
 8004dd2:	e00e      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa54 	bl	8005288 <TIM_OC3_SetConfig>
      break;
 8004de0:	e007      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fab7 	bl	800535c <TIM_OC4_SetConfig>
      break;
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004df0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIM_ConfigClockSource+0x18>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e0b3      	b.n	8004f8c <HAL_TIM_ConfigClockSource+0x180>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5c:	d03e      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0xd0>
 8004e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e62:	f200 8087 	bhi.w	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e6a:	f000 8085 	beq.w	8004f78 <HAL_TIM_ConfigClockSource+0x16c>
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e72:	d87f      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e74:	2b70      	cmp	r3, #112	; 0x70
 8004e76:	d01a      	beq.n	8004eae <HAL_TIM_ConfigClockSource+0xa2>
 8004e78:	2b70      	cmp	r3, #112	; 0x70
 8004e7a:	d87b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e7c:	2b60      	cmp	r3, #96	; 0x60
 8004e7e:	d050      	beq.n	8004f22 <HAL_TIM_ConfigClockSource+0x116>
 8004e80:	2b60      	cmp	r3, #96	; 0x60
 8004e82:	d877      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e84:	2b50      	cmp	r3, #80	; 0x50
 8004e86:	d03c      	beq.n	8004f02 <HAL_TIM_ConfigClockSource+0xf6>
 8004e88:	2b50      	cmp	r3, #80	; 0x50
 8004e8a:	d873      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d058      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0x136>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d86f      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e94:	2b30      	cmp	r3, #48	; 0x30
 8004e96:	d064      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x156>
 8004e98:	2b30      	cmp	r3, #48	; 0x30
 8004e9a:	d86b      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d060      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x156>
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d867      	bhi.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d05c      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x156>
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d05a      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004eac:	e062      	b.n	8004f74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6899      	ldr	r1, [r3, #8]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f000 fb17 	bl	80054f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ed0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	609a      	str	r2, [r3, #8]
      break;
 8004eda:	e04e      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6899      	ldr	r1, [r3, #8]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f000 fb00 	bl	80054f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004efe:	609a      	str	r2, [r3, #8]
      break;
 8004f00:	e03b      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6859      	ldr	r1, [r3, #4]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f000 fa74 	bl	80053fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2150      	movs	r1, #80	; 0x50
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 facd 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 8004f20:	e02b      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6859      	ldr	r1, [r3, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f000 fa93 	bl	800545a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2160      	movs	r1, #96	; 0x60
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 fabd 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 8004f40:	e01b      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 fa54 	bl	80053fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2140      	movs	r1, #64	; 0x40
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 faad 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 8004f60:	e00b      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f000 faa4 	bl	80054ba <TIM_ITRx_SetConfig>
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f74:	bf00      	nop
 8004f76:	e000      	b.n	8004f7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004f78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a34      	ldr	r2, [pc, #208]	; (80050c8 <TIM_Base_SetConfig+0xe4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00f      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005002:	d00b      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a31      	ldr	r2, [pc, #196]	; (80050cc <TIM_Base_SetConfig+0xe8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d007      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a30      	ldr	r2, [pc, #192]	; (80050d0 <TIM_Base_SetConfig+0xec>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a2f      	ldr	r2, [pc, #188]	; (80050d4 <TIM_Base_SetConfig+0xf0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d108      	bne.n	800502e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	4313      	orrs	r3, r2
 800502c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a25      	ldr	r2, [pc, #148]	; (80050c8 <TIM_Base_SetConfig+0xe4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01b      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d017      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <TIM_Base_SetConfig+0xe8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d013      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <TIM_Base_SetConfig+0xec>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00f      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a20      	ldr	r2, [pc, #128]	; (80050d4 <TIM_Base_SetConfig+0xf0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00b      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <TIM_Base_SetConfig+0xf4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <TIM_Base_SetConfig+0xf8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_Base_SetConfig+0x8a>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a1d      	ldr	r2, [pc, #116]	; (80050e0 <TIM_Base_SetConfig+0xfc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d108      	bne.n	8005080 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <TIM_Base_SetConfig+0xe4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d103      	bne.n	80050b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	615a      	str	r2, [r3, #20]
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40014000 	.word	0x40014000
 80050dc:	40014400 	.word	0x40014400
 80050e0:	40014800 	.word	0x40014800

080050e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0201 	bic.w	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0302 	bic.w	r3, r3, #2
 800512c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <TIM_OC1_SetConfig+0xc8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d10c      	bne.n	800515a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 0308 	bic.w	r3, r3, #8
 8005146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f023 0304 	bic.w	r3, r3, #4
 8005158:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a13      	ldr	r2, [pc, #76]	; (80051ac <TIM_OC1_SetConfig+0xc8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d111      	bne.n	8005186 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4313      	orrs	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	40010000 	.word	0x40010000

080051b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0210 	bic.w	r2, r3, #16
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f023 0320 	bic.w	r3, r3, #32
 80051fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	4313      	orrs	r3, r2
 8005206:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a1e      	ldr	r2, [pc, #120]	; (8005284 <TIM_OC2_SetConfig+0xd4>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10d      	bne.n	800522c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800522a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a15      	ldr	r2, [pc, #84]	; (8005284 <TIM_OC2_SetConfig+0xd4>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d113      	bne.n	800525c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800523a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005242:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	4313      	orrs	r3, r2
 800525a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000

08005288 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f023 0303 	bic.w	r3, r3, #3
 80052be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	021b      	lsls	r3, r3, #8
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <TIM_OC3_SetConfig+0xd0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d10d      	bne.n	8005302 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a14      	ldr	r2, [pc, #80]	; (8005358 <TIM_OC3_SetConfig+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d113      	bne.n	8005332 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	621a      	str	r2, [r3, #32]
}
 800534c:	bf00      	nop
 800534e:	371c      	adds	r7, #28
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	40010000 	.word	0x40010000

0800535c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a10      	ldr	r2, [pc, #64]	; (80053f8 <TIM_OC4_SetConfig+0x9c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000

080053fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f023 0201 	bic.w	r2, r3, #1
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	4313      	orrs	r3, r2
 8005430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f023 030a 	bic.w	r3, r3, #10
 8005438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0210 	bic.w	r2, r3, #16
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	031b      	lsls	r3, r3, #12
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f043 0307 	orr.w	r3, r3, #7
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	609a      	str	r2, [r3, #8]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800550a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	431a      	orrs	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	4313      	orrs	r3, r2
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	4313      	orrs	r3, r2
 800551c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	609a      	str	r2, [r3, #8]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e050      	b.n	80055ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d013      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a18      	ldr	r2, [pc, #96]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a16      	ldr	r2, [pc, #88]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a15      	ldr	r2, [pc, #84]	; (8005604 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a13      	ldr	r2, [pc, #76]	; (8005608 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10c      	bne.n	80055d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	40000c00 	.word	0x40000c00
 8005608:	40014000 	.word	0x40014000

0800560c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e03f      	b.n	80056c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fc fe4e 	bl	80022fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2224      	movs	r2, #36	; 0x24
 8005664:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb97 	bl	8005dac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800568c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800569c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b088      	sub	sp, #32
 80056d2:	af02      	add	r7, sp, #8
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	f040 8083 	bne.w	80057f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_UART_Transmit+0x2e>
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e07b      	b.n	80057f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_UART_Transmit+0x40>
 800570a:	2302      	movs	r3, #2
 800570c:	e074      	b.n	80057f8 <HAL_UART_Transmit+0x12a>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2221      	movs	r2, #33	; 0x21
 8005720:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005724:	f7fc ff32 	bl	800258c <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	88fa      	ldrh	r2, [r7, #6]
 800572e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	88fa      	ldrh	r2, [r7, #6]
 8005734:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800573e:	e042      	b.n	80057c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005756:	d122      	bne.n	800579e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2200      	movs	r2, #0
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 f9b6 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e042      	b.n	80057f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005784:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d103      	bne.n	8005796 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3302      	adds	r3, #2
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	e017      	b.n	80057c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	3301      	adds	r3, #1
 800579a:	60bb      	str	r3, [r7, #8]
 800579c:	e013      	b.n	80057c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f993 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e01f      	b.n	80057f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60ba      	str	r2, [r7, #8]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1b7      	bne.n	8005740 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f97a 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e006      	b.n	80057f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	4613      	mov	r3, r2
 800580c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b20      	cmp	r3, #32
 8005818:	d140      	bne.n	800589c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <HAL_UART_Receive_IT+0x26>
 8005820:	88fb      	ldrh	r3, [r7, #6]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e039      	b.n	800589e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_UART_Receive_IT+0x38>
 8005834:	2302      	movs	r3, #2
 8005836:	e032      	b.n	800589e <HAL_UART_Receive_IT+0x9e>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2222      	movs	r2, #34	; 0x22
 800585c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005876:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695a      	ldr	r2, [r3, #20]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68da      	ldr	r2, [r3, #12]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0220 	orr.w	r2, r2, #32
 8005896:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	e000      	b.n	800589e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800589c:	2302      	movs	r3, #2
  }
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10d      	bne.n	80058fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d008      	beq.n	80058fe <HAL_UART_IRQHandler+0x52>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f9d6 	bl	8005ca8 <UART_Receive_IT>
      return;
 80058fc:	e0d0      	b.n	8005aa0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80b0 	beq.w	8005a66 <HAL_UART_IRQHandler+0x1ba>
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d105      	bne.n	800591c <HAL_UART_IRQHandler+0x70>
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80a5 	beq.w	8005a66 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00a      	beq.n	800593c <HAL_UART_IRQHandler+0x90>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005934:	f043 0201 	orr.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f003 0304 	and.w	r3, r3, #4
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_UART_IRQHandler+0xb0>
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d005      	beq.n	800595c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005954:	f043 0202 	orr.w	r2, r3, #2
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_UART_IRQHandler+0xd0>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005974:	f043 0204 	orr.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00f      	beq.n	80059a6 <HAL_UART_IRQHandler+0xfa>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0320 	and.w	r3, r3, #32
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <HAL_UART_IRQHandler+0xee>
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	f043 0208 	orr.w	r2, r3, #8
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d077      	beq.n	8005a9e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <HAL_UART_IRQHandler+0x11c>
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f970 	bl	8005ca8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <HAL_UART_IRQHandler+0x144>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d031      	beq.n	8005a54 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8b9 	bl	8005b68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d123      	bne.n	8005a4c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	695a      	ldr	r2, [r3, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a12:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d013      	beq.n	8005a44 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	4a21      	ldr	r2, [pc, #132]	; (8005aa8 <HAL_UART_IRQHandler+0x1fc>)
 8005a22:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fd ff19 	bl	8003860 <HAL_DMA_Abort_IT>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d016      	beq.n	8005a62 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a3e:	4610      	mov	r0, r2
 8005a40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a42:	e00e      	b.n	8005a62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f83b 	bl	8005ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4a:	e00a      	b.n	8005a62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f837 	bl	8005ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a52:	e006      	b.n	8005a62 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f833 	bl	8005ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005a60:	e01d      	b.n	8005a9e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a62:	bf00      	nop
    return;
 8005a64:	e01b      	b.n	8005a9e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1d6>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f8a6 	bl	8005bcc <UART_Transmit_IT>
    return;
 8005a80:	e00e      	b.n	8005aa0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x1f4>
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d004      	beq.n	8005aa0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f8ee 	bl	8005c78 <UART_EndTransmit_IT>
    return;
 8005a9c:	e000      	b.n	8005aa0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005a9e:	bf00      	nop
  }
}
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005ba5 	.word	0x08005ba5

08005aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae4:	e02c      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aec:	d028      	beq.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005af4:	f7fc fd4a 	bl	800258c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d21d      	bcs.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e00f      	b.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d0c3      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695a      	ldr	r2, [r3, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f7ff ff7e 	bl	8005ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b21      	cmp	r3, #33	; 0x21
 8005bde:	d144      	bne.n	8005c6a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005be8:	d11a      	bne.n	8005c20 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bfe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	1c9a      	adds	r2, r3, #2
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	621a      	str	r2, [r3, #32]
 8005c12:	e00e      	b.n	8005c32 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]
 8005c1e:	e008      	b.n	8005c32 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a1b      	ldr	r3, [r3, #32]
 8005c24:	1c59      	adds	r1, r3, #1
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	6211      	str	r1, [r2, #32]
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	4619      	mov	r1, r3
 8005c40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10f      	bne.n	8005c66 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68da      	ldr	r2, [r3, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68da      	ldr	r2, [r3, #12]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e000      	b.n	8005c6c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
  }
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7ff ff07 	bl	8005aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b22      	cmp	r3, #34	; 0x22
 8005cba:	d171      	bne.n	8005da0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	d123      	bne.n	8005d0e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10e      	bne.n	8005cf2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	1c9a      	adds	r2, r3, #2
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf0:	e029      	b.n	8005d46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
 8005d0c:	e01b      	b.n	8005d46 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6858      	ldr	r0, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	1c59      	adds	r1, r3, #1
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	6291      	str	r1, [r2, #40]	; 0x28
 8005d26:	b2c2      	uxtb	r2, r0
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	e00c      	b.n	8005d46 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	1c58      	adds	r0, r3, #1
 8005d3a:	6879      	ldr	r1, [r7, #4]
 8005d3c:	6288      	str	r0, [r1, #40]	; 0x28
 8005d3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	4619      	mov	r1, r3
 8005d54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d120      	bne.n	8005d9c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0220 	bic.w	r2, r2, #32
 8005d68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fea8 	bl	8001ae8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e002      	b.n	8005da2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	e000      	b.n	8005da2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005da0:	2302      	movs	r3, #2
  }
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db0:	b0bd      	sub	sp, #244	; 0xf4
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc8:	68d9      	ldr	r1, [r3, #12]
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	ea40 0301 	orr.w	r3, r0, r1
 8005dd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	431a      	orrs	r2, r3
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e04:	f021 010c 	bic.w	r1, r1, #12
 8005e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e12:	430b      	orrs	r3, r1
 8005e14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	ea40 0301 	orr.w	r3, r0, r1
 8005e32:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3e:	f040 81a5 	bne.w	800618c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	4bcd      	ldr	r3, [pc, #820]	; (8006180 <UART_SetConfig+0x3d4>)
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d006      	beq.n	8005e5c <UART_SetConfig+0xb0>
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	4bcb      	ldr	r3, [pc, #812]	; (8006184 <UART_SetConfig+0x3d8>)
 8005e56:	429a      	cmp	r2, r3
 8005e58:	f040 80cb 	bne.w	8005ff2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e5c:	f7fe fd56 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 8005e60:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e68:	461c      	mov	r4, r3
 8005e6a:	f04f 0500 	mov.w	r5, #0
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005e7e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005e82:	1912      	adds	r2, r2, r4
 8005e84:	eb45 0303 	adc.w	r3, r5, r3
 8005e88:	f04f 0000 	mov.w	r0, #0
 8005e8c:	f04f 0100 	mov.w	r1, #0
 8005e90:	00d9      	lsls	r1, r3, #3
 8005e92:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e96:	00d0      	lsls	r0, r2, #3
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	1911      	adds	r1, r2, r4
 8005e9e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005ea2:	416b      	adcs	r3, r5
 8005ea4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005eba:	415b      	adcs	r3, r3
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ec0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005ec4:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005ec8:	f7fa fe8a 	bl	8000be0 <__aeabi_uldivmod>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4bad      	ldr	r3, [pc, #692]	; (8006188 <UART_SetConfig+0x3dc>)
 8005ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed6:	095b      	lsrs	r3, r3, #5
 8005ed8:	011e      	lsls	r6, r3, #4
 8005eda:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ede:	461c      	mov	r4, r3
 8005ee0:	f04f 0500 	mov.w	r5, #0
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	1891      	adds	r1, r2, r2
 8005eea:	67b9      	str	r1, [r7, #120]	; 0x78
 8005eec:	415b      	adcs	r3, r3
 8005eee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ef0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005ef4:	1912      	adds	r2, r2, r4
 8005ef6:	eb45 0303 	adc.w	r3, r5, r3
 8005efa:	f04f 0000 	mov.w	r0, #0
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	00d9      	lsls	r1, r3, #3
 8005f04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f08:	00d0      	lsls	r0, r2, #3
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	1911      	adds	r1, r2, r4
 8005f10:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8005f14:	416b      	adcs	r3, r5
 8005f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	461a      	mov	r2, r3
 8005f22:	f04f 0300 	mov.w	r3, #0
 8005f26:	1891      	adds	r1, r2, r2
 8005f28:	6739      	str	r1, [r7, #112]	; 0x70
 8005f2a:	415b      	adcs	r3, r3
 8005f2c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005f32:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005f36:	f7fa fe53 	bl	8000be0 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4b92      	ldr	r3, [pc, #584]	; (8006188 <UART_SetConfig+0x3dc>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	2164      	movs	r1, #100	; 0x64
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	3332      	adds	r3, #50	; 0x32
 8005f52:	4a8d      	ldr	r2, [pc, #564]	; (8006188 <UART_SetConfig+0x3dc>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f60:	441e      	add	r6, r3
 8005f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	1894      	adds	r4, r2, r2
 8005f72:	66bc      	str	r4, [r7, #104]	; 0x68
 8005f74:	415b      	adcs	r3, r3
 8005f76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f78:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005f7c:	1812      	adds	r2, r2, r0
 8005f7e:	eb41 0303 	adc.w	r3, r1, r3
 8005f82:	f04f 0400 	mov.w	r4, #0
 8005f86:	f04f 0500 	mov.w	r5, #0
 8005f8a:	00dd      	lsls	r5, r3, #3
 8005f8c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f90:	00d4      	lsls	r4, r2, #3
 8005f92:	4622      	mov	r2, r4
 8005f94:	462b      	mov	r3, r5
 8005f96:	1814      	adds	r4, r2, r0
 8005f98:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005f9c:	414b      	adcs	r3, r1
 8005f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	1891      	adds	r1, r2, r2
 8005fb0:	6639      	str	r1, [r7, #96]	; 0x60
 8005fb2:	415b      	adcs	r3, r3
 8005fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fb6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005fba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fbe:	f7fa fe0f 	bl	8000be0 <__aeabi_uldivmod>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4b70      	ldr	r3, [pc, #448]	; (8006188 <UART_SetConfig+0x3dc>)
 8005fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fcc:	095b      	lsrs	r3, r3, #5
 8005fce:	2164      	movs	r1, #100	; 0x64
 8005fd0:	fb01 f303 	mul.w	r3, r1, r3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	3332      	adds	r3, #50	; 0x32
 8005fda:	4a6b      	ldr	r2, [pc, #428]	; (8006188 <UART_SetConfig+0x3dc>)
 8005fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	f003 0207 	and.w	r2, r3, #7
 8005fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4432      	add	r2, r6
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	e26d      	b.n	80064ce <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ff2:	f7fe fc77 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 8005ff6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ffe:	461c      	mov	r4, r3
 8006000:	f04f 0500 	mov.w	r5, #0
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	1891      	adds	r1, r2, r2
 800600a:	65b9      	str	r1, [r7, #88]	; 0x58
 800600c:	415b      	adcs	r3, r3
 800600e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006010:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006014:	1912      	adds	r2, r2, r4
 8006016:	eb45 0303 	adc.w	r3, r5, r3
 800601a:	f04f 0000 	mov.w	r0, #0
 800601e:	f04f 0100 	mov.w	r1, #0
 8006022:	00d9      	lsls	r1, r3, #3
 8006024:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006028:	00d0      	lsls	r0, r2, #3
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	1911      	adds	r1, r2, r4
 8006030:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8006034:	416b      	adcs	r3, r5
 8006036:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	461a      	mov	r2, r3
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	1891      	adds	r1, r2, r2
 8006048:	6539      	str	r1, [r7, #80]	; 0x50
 800604a:	415b      	adcs	r3, r3
 800604c:	657b      	str	r3, [r7, #84]	; 0x54
 800604e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006052:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8006056:	f7fa fdc3 	bl	8000be0 <__aeabi_uldivmod>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4b4a      	ldr	r3, [pc, #296]	; (8006188 <UART_SetConfig+0x3dc>)
 8006060:	fba3 2302 	umull	r2, r3, r3, r2
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	011e      	lsls	r6, r3, #4
 8006068:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800606c:	461c      	mov	r4, r3
 800606e:	f04f 0500 	mov.w	r5, #0
 8006072:	4622      	mov	r2, r4
 8006074:	462b      	mov	r3, r5
 8006076:	1891      	adds	r1, r2, r2
 8006078:	64b9      	str	r1, [r7, #72]	; 0x48
 800607a:	415b      	adcs	r3, r3
 800607c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800607e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006082:	1912      	adds	r2, r2, r4
 8006084:	eb45 0303 	adc.w	r3, r5, r3
 8006088:	f04f 0000 	mov.w	r0, #0
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	00d9      	lsls	r1, r3, #3
 8006092:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006096:	00d0      	lsls	r0, r2, #3
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	1911      	adds	r1, r2, r4
 800609e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80060a2:	416b      	adcs	r3, r5
 80060a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80060a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	461a      	mov	r2, r3
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	1891      	adds	r1, r2, r2
 80060b6:	6439      	str	r1, [r7, #64]	; 0x40
 80060b8:	415b      	adcs	r3, r3
 80060ba:	647b      	str	r3, [r7, #68]	; 0x44
 80060bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060c0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80060c4:	f7fa fd8c 	bl	8000be0 <__aeabi_uldivmod>
 80060c8:	4602      	mov	r2, r0
 80060ca:	460b      	mov	r3, r1
 80060cc:	4b2e      	ldr	r3, [pc, #184]	; (8006188 <UART_SetConfig+0x3dc>)
 80060ce:	fba3 1302 	umull	r1, r3, r3, r2
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	2164      	movs	r1, #100	; 0x64
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	3332      	adds	r3, #50	; 0x32
 80060e0:	4a29      	ldr	r2, [pc, #164]	; (8006188 <UART_SetConfig+0x3dc>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	095b      	lsrs	r3, r3, #5
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060ee:	441e      	add	r6, r3
 80060f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80060f4:	4618      	mov	r0, r3
 80060f6:	f04f 0100 	mov.w	r1, #0
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	1894      	adds	r4, r2, r2
 8006100:	63bc      	str	r4, [r7, #56]	; 0x38
 8006102:	415b      	adcs	r3, r3
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006106:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800610a:	1812      	adds	r2, r2, r0
 800610c:	eb41 0303 	adc.w	r3, r1, r3
 8006110:	f04f 0400 	mov.w	r4, #0
 8006114:	f04f 0500 	mov.w	r5, #0
 8006118:	00dd      	lsls	r5, r3, #3
 800611a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800611e:	00d4      	lsls	r4, r2, #3
 8006120:	4622      	mov	r2, r4
 8006122:	462b      	mov	r3, r5
 8006124:	1814      	adds	r4, r2, r0
 8006126:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800612a:	414b      	adcs	r3, r1
 800612c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	461a      	mov	r2, r3
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	1891      	adds	r1, r2, r2
 800613e:	6339      	str	r1, [r7, #48]	; 0x30
 8006140:	415b      	adcs	r3, r3
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
 8006144:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006148:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800614c:	f7fa fd48 	bl	8000be0 <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <UART_SetConfig+0x3dc>)
 8006156:	fba3 1302 	umull	r1, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	2164      	movs	r1, #100	; 0x64
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	3332      	adds	r3, #50	; 0x32
 8006168:	4a07      	ldr	r2, [pc, #28]	; (8006188 <UART_SetConfig+0x3dc>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	f003 0207 	and.w	r2, r3, #7
 8006174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4432      	add	r2, r6
 800617c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800617e:	e1a6      	b.n	80064ce <UART_SetConfig+0x722>
 8006180:	40011000 	.word	0x40011000
 8006184:	40011400 	.word	0x40011400
 8006188:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800618c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4bd1      	ldr	r3, [pc, #836]	; (80064d8 <UART_SetConfig+0x72c>)
 8006194:	429a      	cmp	r2, r3
 8006196:	d006      	beq.n	80061a6 <UART_SetConfig+0x3fa>
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	4bcf      	ldr	r3, [pc, #828]	; (80064dc <UART_SetConfig+0x730>)
 80061a0:	429a      	cmp	r2, r3
 80061a2:	f040 80ca 	bne.w	800633a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80061a6:	f7fe fbb1 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 80061aa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b2:	461c      	mov	r4, r3
 80061b4:	f04f 0500 	mov.w	r5, #0
 80061b8:	4622      	mov	r2, r4
 80061ba:	462b      	mov	r3, r5
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	62b9      	str	r1, [r7, #40]	; 0x28
 80061c0:	415b      	adcs	r3, r3
 80061c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061c8:	1912      	adds	r2, r2, r4
 80061ca:	eb45 0303 	adc.w	r3, r5, r3
 80061ce:	f04f 0000 	mov.w	r0, #0
 80061d2:	f04f 0100 	mov.w	r1, #0
 80061d6:	00d9      	lsls	r1, r3, #3
 80061d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061dc:	00d0      	lsls	r0, r2, #3
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	eb12 0a04 	adds.w	sl, r2, r4
 80061e6:	eb43 0b05 	adc.w	fp, r3, r5
 80061ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f04f 0100 	mov.w	r1, #0
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	008b      	lsls	r3, r1, #2
 8006200:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006204:	0082      	lsls	r2, r0, #2
 8006206:	4650      	mov	r0, sl
 8006208:	4659      	mov	r1, fp
 800620a:	f7fa fce9 	bl	8000be0 <__aeabi_uldivmod>
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4bb3      	ldr	r3, [pc, #716]	; (80064e0 <UART_SetConfig+0x734>)
 8006214:	fba3 2302 	umull	r2, r3, r3, r2
 8006218:	095b      	lsrs	r3, r3, #5
 800621a:	011e      	lsls	r6, r3, #4
 800621c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006220:	4618      	mov	r0, r3
 8006222:	f04f 0100 	mov.w	r1, #0
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	1894      	adds	r4, r2, r2
 800622c:	623c      	str	r4, [r7, #32]
 800622e:	415b      	adcs	r3, r3
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
 8006232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006236:	1812      	adds	r2, r2, r0
 8006238:	eb41 0303 	adc.w	r3, r1, r3
 800623c:	f04f 0400 	mov.w	r4, #0
 8006240:	f04f 0500 	mov.w	r5, #0
 8006244:	00dd      	lsls	r5, r3, #3
 8006246:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800624a:	00d4      	lsls	r4, r2, #3
 800624c:	4622      	mov	r2, r4
 800624e:	462b      	mov	r3, r5
 8006250:	1814      	adds	r4, r2, r0
 8006252:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8006256:	414b      	adcs	r3, r1
 8006258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800625c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	4618      	mov	r0, r3
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	008b      	lsls	r3, r1, #2
 8006272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006276:	0082      	lsls	r2, r0, #2
 8006278:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800627c:	f7fa fcb0 	bl	8000be0 <__aeabi_uldivmod>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	4b96      	ldr	r3, [pc, #600]	; (80064e0 <UART_SetConfig+0x734>)
 8006286:	fba3 1302 	umull	r1, r3, r3, r2
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	2164      	movs	r1, #100	; 0x64
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	3332      	adds	r3, #50	; 0x32
 8006298:	4a91      	ldr	r2, [pc, #580]	; (80064e0 <UART_SetConfig+0x734>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	095b      	lsrs	r3, r3, #5
 80062a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062a4:	441e      	add	r6, r3
 80062a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062aa:	4618      	mov	r0, r3
 80062ac:	f04f 0100 	mov.w	r1, #0
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	1894      	adds	r4, r2, r2
 80062b6:	61bc      	str	r4, [r7, #24]
 80062b8:	415b      	adcs	r3, r3
 80062ba:	61fb      	str	r3, [r7, #28]
 80062bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062c0:	1812      	adds	r2, r2, r0
 80062c2:	eb41 0303 	adc.w	r3, r1, r3
 80062c6:	f04f 0400 	mov.w	r4, #0
 80062ca:	f04f 0500 	mov.w	r5, #0
 80062ce:	00dd      	lsls	r5, r3, #3
 80062d0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062d4:	00d4      	lsls	r4, r2, #3
 80062d6:	4622      	mov	r2, r4
 80062d8:	462b      	mov	r3, r5
 80062da:	1814      	adds	r4, r2, r0
 80062dc:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80062e0:	414b      	adcs	r3, r1
 80062e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80062e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f04f 0100 	mov.w	r1, #0
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	008b      	lsls	r3, r1, #2
 80062fc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006300:	0082      	lsls	r2, r0, #2
 8006302:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006306:	f7fa fc6b 	bl	8000be0 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b74      	ldr	r3, [pc, #464]	; (80064e0 <UART_SetConfig+0x734>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	; 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	3332      	adds	r3, #50	; 0x32
 8006322:	4a6f      	ldr	r2, [pc, #444]	; (80064e0 <UART_SetConfig+0x734>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4432      	add	r2, r6
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	e0c9      	b.n	80064ce <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800633a:	f7fe fad3 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 800633e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006342:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006346:	461c      	mov	r4, r3
 8006348:	f04f 0500 	mov.w	r5, #0
 800634c:	4622      	mov	r2, r4
 800634e:	462b      	mov	r3, r5
 8006350:	1891      	adds	r1, r2, r2
 8006352:	6139      	str	r1, [r7, #16]
 8006354:	415b      	adcs	r3, r3
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800635c:	1912      	adds	r2, r2, r4
 800635e:	eb45 0303 	adc.w	r3, r5, r3
 8006362:	f04f 0000 	mov.w	r0, #0
 8006366:	f04f 0100 	mov.w	r1, #0
 800636a:	00d9      	lsls	r1, r3, #3
 800636c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006370:	00d0      	lsls	r0, r2, #3
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	eb12 0804 	adds.w	r8, r2, r4
 800637a:	eb43 0905 	adc.w	r9, r3, r5
 800637e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	4618      	mov	r0, r3
 8006386:	f04f 0100 	mov.w	r1, #0
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	008b      	lsls	r3, r1, #2
 8006394:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006398:	0082      	lsls	r2, r0, #2
 800639a:	4640      	mov	r0, r8
 800639c:	4649      	mov	r1, r9
 800639e:	f7fa fc1f 	bl	8000be0 <__aeabi_uldivmod>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <UART_SetConfig+0x734>)
 80063a8:	fba3 2302 	umull	r2, r3, r3, r2
 80063ac:	095b      	lsrs	r3, r3, #5
 80063ae:	011e      	lsls	r6, r3, #4
 80063b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063b4:	4618      	mov	r0, r3
 80063b6:	f04f 0100 	mov.w	r1, #0
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	1894      	adds	r4, r2, r2
 80063c0:	60bc      	str	r4, [r7, #8]
 80063c2:	415b      	adcs	r3, r3
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063ca:	1812      	adds	r2, r2, r0
 80063cc:	eb41 0303 	adc.w	r3, r1, r3
 80063d0:	f04f 0400 	mov.w	r4, #0
 80063d4:	f04f 0500 	mov.w	r5, #0
 80063d8:	00dd      	lsls	r5, r3, #3
 80063da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063de:	00d4      	lsls	r4, r2, #3
 80063e0:	4622      	mov	r2, r4
 80063e2:	462b      	mov	r3, r5
 80063e4:	1814      	adds	r4, r2, r0
 80063e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80063ea:	414b      	adcs	r3, r1
 80063ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	f04f 0300 	mov.w	r3, #0
 8006404:	008b      	lsls	r3, r1, #2
 8006406:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800640a:	0082      	lsls	r2, r0, #2
 800640c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006410:	f7fa fbe6 	bl	8000be0 <__aeabi_uldivmod>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <UART_SetConfig+0x734>)
 800641a:	fba3 1302 	umull	r1, r3, r3, r2
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	2164      	movs	r1, #100	; 0x64
 8006422:	fb01 f303 	mul.w	r3, r1, r3
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	3332      	adds	r3, #50	; 0x32
 800642c:	4a2c      	ldr	r2, [pc, #176]	; (80064e0 <UART_SetConfig+0x734>)
 800642e:	fba2 2303 	umull	r2, r3, r2, r3
 8006432:	095b      	lsrs	r3, r3, #5
 8006434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006438:	441e      	add	r6, r3
 800643a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800643e:	4618      	mov	r0, r3
 8006440:	f04f 0100 	mov.w	r1, #0
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	1894      	adds	r4, r2, r2
 800644a:	603c      	str	r4, [r7, #0]
 800644c:	415b      	adcs	r3, r3
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006454:	1812      	adds	r2, r2, r0
 8006456:	eb41 0303 	adc.w	r3, r1, r3
 800645a:	f04f 0400 	mov.w	r4, #0
 800645e:	f04f 0500 	mov.w	r5, #0
 8006462:	00dd      	lsls	r5, r3, #3
 8006464:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006468:	00d4      	lsls	r4, r2, #3
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1814      	adds	r4, r2, r0
 8006470:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006474:	414b      	adcs	r3, r1
 8006476:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	f04f 0100 	mov.w	r1, #0
 8006486:	f04f 0200 	mov.w	r2, #0
 800648a:	f04f 0300 	mov.w	r3, #0
 800648e:	008b      	lsls	r3, r1, #2
 8006490:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006494:	0082      	lsls	r2, r0, #2
 8006496:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800649a:	f7fa fba1 	bl	8000be0 <__aeabi_uldivmod>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4b0f      	ldr	r3, [pc, #60]	; (80064e0 <UART_SetConfig+0x734>)
 80064a4:	fba3 1302 	umull	r1, r3, r3, r2
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	2164      	movs	r1, #100	; 0x64
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	3332      	adds	r3, #50	; 0x32
 80064b6:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <UART_SetConfig+0x734>)
 80064b8:	fba2 2303 	umull	r2, r3, r2, r3
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4432      	add	r2, r6
 80064ca:	609a      	str	r2, [r3, #8]
}
 80064cc:	e7ff      	b.n	80064ce <UART_SetConfig+0x722>
 80064ce:	bf00      	nop
 80064d0:	37f4      	adds	r7, #244	; 0xf4
 80064d2:	46bd      	mov	sp, r7
 80064d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d8:	40011000 	.word	0x40011000
 80064dc:	40011400 	.word	0x40011400
 80064e0:	51eb851f 	.word	0x51eb851f

080064e4 <__errno>:
 80064e4:	4b01      	ldr	r3, [pc, #4]	; (80064ec <__errno+0x8>)
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000010 	.word	0x20000010

080064f0 <__libc_init_array>:
 80064f0:	b570      	push	{r4, r5, r6, lr}
 80064f2:	4d0d      	ldr	r5, [pc, #52]	; (8006528 <__libc_init_array+0x38>)
 80064f4:	4c0d      	ldr	r4, [pc, #52]	; (800652c <__libc_init_array+0x3c>)
 80064f6:	1b64      	subs	r4, r4, r5
 80064f8:	10a4      	asrs	r4, r4, #2
 80064fa:	2600      	movs	r6, #0
 80064fc:	42a6      	cmp	r6, r4
 80064fe:	d109      	bne.n	8006514 <__libc_init_array+0x24>
 8006500:	4d0b      	ldr	r5, [pc, #44]	; (8006530 <__libc_init_array+0x40>)
 8006502:	4c0c      	ldr	r4, [pc, #48]	; (8006534 <__libc_init_array+0x44>)
 8006504:	f001 f81a 	bl	800753c <_init>
 8006508:	1b64      	subs	r4, r4, r5
 800650a:	10a4      	asrs	r4, r4, #2
 800650c:	2600      	movs	r6, #0
 800650e:	42a6      	cmp	r6, r4
 8006510:	d105      	bne.n	800651e <__libc_init_array+0x2e>
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	f855 3b04 	ldr.w	r3, [r5], #4
 8006518:	4798      	blx	r3
 800651a:	3601      	adds	r6, #1
 800651c:	e7ee      	b.n	80064fc <__libc_init_array+0xc>
 800651e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006522:	4798      	blx	r3
 8006524:	3601      	adds	r6, #1
 8006526:	e7f2      	b.n	800650e <__libc_init_array+0x1e>
 8006528:	080075c8 	.word	0x080075c8
 800652c:	080075c8 	.word	0x080075c8
 8006530:	080075c8 	.word	0x080075c8
 8006534:	080075cc 	.word	0x080075cc

08006538 <memset>:
 8006538:	4402      	add	r2, r0
 800653a:	4603      	mov	r3, r0
 800653c:	4293      	cmp	r3, r2
 800653e:	d100      	bne.n	8006542 <memset+0xa>
 8006540:	4770      	bx	lr
 8006542:	f803 1b01 	strb.w	r1, [r3], #1
 8006546:	e7f9      	b.n	800653c <memset+0x4>

08006548 <round>:
 8006548:	ec51 0b10 	vmov	r0, r1, d0
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8006552:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8006556:	2c13      	cmp	r4, #19
 8006558:	ee10 2a10 	vmov	r2, s0
 800655c:	460b      	mov	r3, r1
 800655e:	dc19      	bgt.n	8006594 <round+0x4c>
 8006560:	2c00      	cmp	r4, #0
 8006562:	da09      	bge.n	8006578 <round+0x30>
 8006564:	3401      	adds	r4, #1
 8006566:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800656a:	d103      	bne.n	8006574 <round+0x2c>
 800656c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006570:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006574:	2100      	movs	r1, #0
 8006576:	e028      	b.n	80065ca <round+0x82>
 8006578:	4d15      	ldr	r5, [pc, #84]	; (80065d0 <round+0x88>)
 800657a:	4125      	asrs	r5, r4
 800657c:	ea01 0605 	and.w	r6, r1, r5
 8006580:	4332      	orrs	r2, r6
 8006582:	d00e      	beq.n	80065a2 <round+0x5a>
 8006584:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006588:	fa42 f404 	asr.w	r4, r2, r4
 800658c:	4423      	add	r3, r4
 800658e:	ea23 0305 	bic.w	r3, r3, r5
 8006592:	e7ef      	b.n	8006574 <round+0x2c>
 8006594:	2c33      	cmp	r4, #51	; 0x33
 8006596:	dd07      	ble.n	80065a8 <round+0x60>
 8006598:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800659c:	d101      	bne.n	80065a2 <round+0x5a>
 800659e:	f7f9 fe21 	bl	80001e4 <__adddf3>
 80065a2:	ec41 0b10 	vmov	d0, r0, r1
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80065ac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80065b0:	40f5      	lsrs	r5, r6
 80065b2:	4228      	tst	r0, r5
 80065b4:	d0f5      	beq.n	80065a2 <round+0x5a>
 80065b6:	2101      	movs	r1, #1
 80065b8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80065bc:	fa01 f404 	lsl.w	r4, r1, r4
 80065c0:	1912      	adds	r2, r2, r4
 80065c2:	bf28      	it	cs
 80065c4:	185b      	addcs	r3, r3, r1
 80065c6:	ea22 0105 	bic.w	r1, r2, r5
 80065ca:	4608      	mov	r0, r1
 80065cc:	4619      	mov	r1, r3
 80065ce:	e7e8      	b.n	80065a2 <round+0x5a>
 80065d0:	000fffff 	.word	0x000fffff

080065d4 <pow>:
 80065d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d8:	ec59 8b10 	vmov	r8, r9, d0
 80065dc:	ec57 6b11 	vmov	r6, r7, d1
 80065e0:	f000 f8a6 	bl	8006730 <__ieee754_pow>
 80065e4:	4b4e      	ldr	r3, [pc, #312]	; (8006720 <pow+0x14c>)
 80065e6:	f993 3000 	ldrsb.w	r3, [r3]
 80065ea:	3301      	adds	r3, #1
 80065ec:	ec55 4b10 	vmov	r4, r5, d0
 80065f0:	d015      	beq.n	800661e <pow+0x4a>
 80065f2:	4632      	mov	r2, r6
 80065f4:	463b      	mov	r3, r7
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7fa fa43 	bl	8000a84 <__aeabi_dcmpun>
 80065fe:	b970      	cbnz	r0, 800661e <pow+0x4a>
 8006600:	4642      	mov	r2, r8
 8006602:	464b      	mov	r3, r9
 8006604:	4640      	mov	r0, r8
 8006606:	4649      	mov	r1, r9
 8006608:	f7fa fa3c 	bl	8000a84 <__aeabi_dcmpun>
 800660c:	2200      	movs	r2, #0
 800660e:	2300      	movs	r3, #0
 8006610:	b148      	cbz	r0, 8006626 <pow+0x52>
 8006612:	4630      	mov	r0, r6
 8006614:	4639      	mov	r1, r7
 8006616:	f7fa fa03 	bl	8000a20 <__aeabi_dcmpeq>
 800661a:	2800      	cmp	r0, #0
 800661c:	d17d      	bne.n	800671a <pow+0x146>
 800661e:	ec45 4b10 	vmov	d0, r4, r5
 8006622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f7fa f9f9 	bl	8000a20 <__aeabi_dcmpeq>
 800662e:	b1e0      	cbz	r0, 800666a <pow+0x96>
 8006630:	2200      	movs	r2, #0
 8006632:	2300      	movs	r3, #0
 8006634:	4630      	mov	r0, r6
 8006636:	4639      	mov	r1, r7
 8006638:	f7fa f9f2 	bl	8000a20 <__aeabi_dcmpeq>
 800663c:	2800      	cmp	r0, #0
 800663e:	d16c      	bne.n	800671a <pow+0x146>
 8006640:	ec47 6b10 	vmov	d0, r6, r7
 8006644:	f000 fe53 	bl	80072ee <finite>
 8006648:	2800      	cmp	r0, #0
 800664a:	d0e8      	beq.n	800661e <pow+0x4a>
 800664c:	2200      	movs	r2, #0
 800664e:	2300      	movs	r3, #0
 8006650:	4630      	mov	r0, r6
 8006652:	4639      	mov	r1, r7
 8006654:	f7fa f9ee 	bl	8000a34 <__aeabi_dcmplt>
 8006658:	2800      	cmp	r0, #0
 800665a:	d0e0      	beq.n	800661e <pow+0x4a>
 800665c:	f7ff ff42 	bl	80064e4 <__errno>
 8006660:	2321      	movs	r3, #33	; 0x21
 8006662:	6003      	str	r3, [r0, #0]
 8006664:	2400      	movs	r4, #0
 8006666:	4d2f      	ldr	r5, [pc, #188]	; (8006724 <pow+0x150>)
 8006668:	e7d9      	b.n	800661e <pow+0x4a>
 800666a:	ec45 4b10 	vmov	d0, r4, r5
 800666e:	f000 fe3e 	bl	80072ee <finite>
 8006672:	bbb8      	cbnz	r0, 80066e4 <pow+0x110>
 8006674:	ec49 8b10 	vmov	d0, r8, r9
 8006678:	f000 fe39 	bl	80072ee <finite>
 800667c:	b390      	cbz	r0, 80066e4 <pow+0x110>
 800667e:	ec47 6b10 	vmov	d0, r6, r7
 8006682:	f000 fe34 	bl	80072ee <finite>
 8006686:	b368      	cbz	r0, 80066e4 <pow+0x110>
 8006688:	4622      	mov	r2, r4
 800668a:	462b      	mov	r3, r5
 800668c:	4620      	mov	r0, r4
 800668e:	4629      	mov	r1, r5
 8006690:	f7fa f9f8 	bl	8000a84 <__aeabi_dcmpun>
 8006694:	b160      	cbz	r0, 80066b0 <pow+0xdc>
 8006696:	f7ff ff25 	bl	80064e4 <__errno>
 800669a:	2321      	movs	r3, #33	; 0x21
 800669c:	6003      	str	r3, [r0, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	2300      	movs	r3, #0
 80066a2:	4610      	mov	r0, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	f7fa f87d 	bl	80007a4 <__aeabi_ddiv>
 80066aa:	4604      	mov	r4, r0
 80066ac:	460d      	mov	r5, r1
 80066ae:	e7b6      	b.n	800661e <pow+0x4a>
 80066b0:	f7ff ff18 	bl	80064e4 <__errno>
 80066b4:	2322      	movs	r3, #34	; 0x22
 80066b6:	6003      	str	r3, [r0, #0]
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	4640      	mov	r0, r8
 80066be:	4649      	mov	r1, r9
 80066c0:	f7fa f9b8 	bl	8000a34 <__aeabi_dcmplt>
 80066c4:	2400      	movs	r4, #0
 80066c6:	b158      	cbz	r0, 80066e0 <pow+0x10c>
 80066c8:	ec47 6b10 	vmov	d0, r6, r7
 80066cc:	f000 fe24 	bl	8007318 <rint>
 80066d0:	4632      	mov	r2, r6
 80066d2:	ec51 0b10 	vmov	r0, r1, d0
 80066d6:	463b      	mov	r3, r7
 80066d8:	f7fa f9a2 	bl	8000a20 <__aeabi_dcmpeq>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0c2      	beq.n	8006666 <pow+0x92>
 80066e0:	4d11      	ldr	r5, [pc, #68]	; (8006728 <pow+0x154>)
 80066e2:	e79c      	b.n	800661e <pow+0x4a>
 80066e4:	2200      	movs	r2, #0
 80066e6:	2300      	movs	r3, #0
 80066e8:	4620      	mov	r0, r4
 80066ea:	4629      	mov	r1, r5
 80066ec:	f7fa f998 	bl	8000a20 <__aeabi_dcmpeq>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d094      	beq.n	800661e <pow+0x4a>
 80066f4:	ec49 8b10 	vmov	d0, r8, r9
 80066f8:	f000 fdf9 	bl	80072ee <finite>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d08e      	beq.n	800661e <pow+0x4a>
 8006700:	ec47 6b10 	vmov	d0, r6, r7
 8006704:	f000 fdf3 	bl	80072ee <finite>
 8006708:	2800      	cmp	r0, #0
 800670a:	d088      	beq.n	800661e <pow+0x4a>
 800670c:	f7ff feea 	bl	80064e4 <__errno>
 8006710:	2322      	movs	r3, #34	; 0x22
 8006712:	6003      	str	r3, [r0, #0]
 8006714:	2400      	movs	r4, #0
 8006716:	2500      	movs	r5, #0
 8006718:	e781      	b.n	800661e <pow+0x4a>
 800671a:	4d04      	ldr	r5, [pc, #16]	; (800672c <pow+0x158>)
 800671c:	2400      	movs	r4, #0
 800671e:	e77e      	b.n	800661e <pow+0x4a>
 8006720:	20000074 	.word	0x20000074
 8006724:	fff00000 	.word	0xfff00000
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	3ff00000 	.word	0x3ff00000

08006730 <__ieee754_pow>:
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	ed2d 8b06 	vpush	{d8-d10}
 8006738:	b08d      	sub	sp, #52	; 0x34
 800673a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800673e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006742:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006746:	ea56 0100 	orrs.w	r1, r6, r0
 800674a:	ec53 2b10 	vmov	r2, r3, d0
 800674e:	f000 84d1 	beq.w	80070f4 <__ieee754_pow+0x9c4>
 8006752:	497f      	ldr	r1, [pc, #508]	; (8006950 <__ieee754_pow+0x220>)
 8006754:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006758:	428c      	cmp	r4, r1
 800675a:	ee10 8a10 	vmov	r8, s0
 800675e:	4699      	mov	r9, r3
 8006760:	dc09      	bgt.n	8006776 <__ieee754_pow+0x46>
 8006762:	d103      	bne.n	800676c <__ieee754_pow+0x3c>
 8006764:	b97a      	cbnz	r2, 8006786 <__ieee754_pow+0x56>
 8006766:	42a6      	cmp	r6, r4
 8006768:	dd02      	ble.n	8006770 <__ieee754_pow+0x40>
 800676a:	e00c      	b.n	8006786 <__ieee754_pow+0x56>
 800676c:	428e      	cmp	r6, r1
 800676e:	dc02      	bgt.n	8006776 <__ieee754_pow+0x46>
 8006770:	428e      	cmp	r6, r1
 8006772:	d110      	bne.n	8006796 <__ieee754_pow+0x66>
 8006774:	b178      	cbz	r0, 8006796 <__ieee754_pow+0x66>
 8006776:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800677a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800677e:	ea54 0308 	orrs.w	r3, r4, r8
 8006782:	f000 84b7 	beq.w	80070f4 <__ieee754_pow+0x9c4>
 8006786:	4873      	ldr	r0, [pc, #460]	; (8006954 <__ieee754_pow+0x224>)
 8006788:	b00d      	add	sp, #52	; 0x34
 800678a:	ecbd 8b06 	vpop	{d8-d10}
 800678e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006792:	f000 bdb9 	b.w	8007308 <nan>
 8006796:	f1b9 0f00 	cmp.w	r9, #0
 800679a:	da36      	bge.n	800680a <__ieee754_pow+0xda>
 800679c:	496e      	ldr	r1, [pc, #440]	; (8006958 <__ieee754_pow+0x228>)
 800679e:	428e      	cmp	r6, r1
 80067a0:	dc51      	bgt.n	8006846 <__ieee754_pow+0x116>
 80067a2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80067a6:	428e      	cmp	r6, r1
 80067a8:	f340 84af 	ble.w	800710a <__ieee754_pow+0x9da>
 80067ac:	1531      	asrs	r1, r6, #20
 80067ae:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80067b2:	2914      	cmp	r1, #20
 80067b4:	dd0f      	ble.n	80067d6 <__ieee754_pow+0xa6>
 80067b6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80067ba:	fa20 fc01 	lsr.w	ip, r0, r1
 80067be:	fa0c f101 	lsl.w	r1, ip, r1
 80067c2:	4281      	cmp	r1, r0
 80067c4:	f040 84a1 	bne.w	800710a <__ieee754_pow+0x9da>
 80067c8:	f00c 0c01 	and.w	ip, ip, #1
 80067cc:	f1cc 0102 	rsb	r1, ip, #2
 80067d0:	9100      	str	r1, [sp, #0]
 80067d2:	b180      	cbz	r0, 80067f6 <__ieee754_pow+0xc6>
 80067d4:	e059      	b.n	800688a <__ieee754_pow+0x15a>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d155      	bne.n	8006886 <__ieee754_pow+0x156>
 80067da:	f1c1 0114 	rsb	r1, r1, #20
 80067de:	fa46 fc01 	asr.w	ip, r6, r1
 80067e2:	fa0c f101 	lsl.w	r1, ip, r1
 80067e6:	42b1      	cmp	r1, r6
 80067e8:	f040 848c 	bne.w	8007104 <__ieee754_pow+0x9d4>
 80067ec:	f00c 0c01 	and.w	ip, ip, #1
 80067f0:	f1cc 0102 	rsb	r1, ip, #2
 80067f4:	9100      	str	r1, [sp, #0]
 80067f6:	4959      	ldr	r1, [pc, #356]	; (800695c <__ieee754_pow+0x22c>)
 80067f8:	428e      	cmp	r6, r1
 80067fa:	d12d      	bne.n	8006858 <__ieee754_pow+0x128>
 80067fc:	2f00      	cmp	r7, #0
 80067fe:	da79      	bge.n	80068f4 <__ieee754_pow+0x1c4>
 8006800:	4956      	ldr	r1, [pc, #344]	; (800695c <__ieee754_pow+0x22c>)
 8006802:	2000      	movs	r0, #0
 8006804:	f7f9 ffce 	bl	80007a4 <__aeabi_ddiv>
 8006808:	e016      	b.n	8006838 <__ieee754_pow+0x108>
 800680a:	2100      	movs	r1, #0
 800680c:	9100      	str	r1, [sp, #0]
 800680e:	2800      	cmp	r0, #0
 8006810:	d13b      	bne.n	800688a <__ieee754_pow+0x15a>
 8006812:	494f      	ldr	r1, [pc, #316]	; (8006950 <__ieee754_pow+0x220>)
 8006814:	428e      	cmp	r6, r1
 8006816:	d1ee      	bne.n	80067f6 <__ieee754_pow+0xc6>
 8006818:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800681c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006820:	ea53 0308 	orrs.w	r3, r3, r8
 8006824:	f000 8466 	beq.w	80070f4 <__ieee754_pow+0x9c4>
 8006828:	4b4d      	ldr	r3, [pc, #308]	; (8006960 <__ieee754_pow+0x230>)
 800682a:	429c      	cmp	r4, r3
 800682c:	dd0d      	ble.n	800684a <__ieee754_pow+0x11a>
 800682e:	2f00      	cmp	r7, #0
 8006830:	f280 8464 	bge.w	80070fc <__ieee754_pow+0x9cc>
 8006834:	2000      	movs	r0, #0
 8006836:	2100      	movs	r1, #0
 8006838:	ec41 0b10 	vmov	d0, r0, r1
 800683c:	b00d      	add	sp, #52	; 0x34
 800683e:	ecbd 8b06 	vpop	{d8-d10}
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	2102      	movs	r1, #2
 8006848:	e7e0      	b.n	800680c <__ieee754_pow+0xdc>
 800684a:	2f00      	cmp	r7, #0
 800684c:	daf2      	bge.n	8006834 <__ieee754_pow+0x104>
 800684e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8006852:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006856:	e7ef      	b.n	8006838 <__ieee754_pow+0x108>
 8006858:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800685c:	d104      	bne.n	8006868 <__ieee754_pow+0x138>
 800685e:	4610      	mov	r0, r2
 8006860:	4619      	mov	r1, r3
 8006862:	f7f9 fe75 	bl	8000550 <__aeabi_dmul>
 8006866:	e7e7      	b.n	8006838 <__ieee754_pow+0x108>
 8006868:	493e      	ldr	r1, [pc, #248]	; (8006964 <__ieee754_pow+0x234>)
 800686a:	428f      	cmp	r7, r1
 800686c:	d10d      	bne.n	800688a <__ieee754_pow+0x15a>
 800686e:	f1b9 0f00 	cmp.w	r9, #0
 8006872:	db0a      	blt.n	800688a <__ieee754_pow+0x15a>
 8006874:	ec43 2b10 	vmov	d0, r2, r3
 8006878:	b00d      	add	sp, #52	; 0x34
 800687a:	ecbd 8b06 	vpop	{d8-d10}
 800687e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006882:	f000 bc77 	b.w	8007174 <__ieee754_sqrt>
 8006886:	2100      	movs	r1, #0
 8006888:	9100      	str	r1, [sp, #0]
 800688a:	ec43 2b10 	vmov	d0, r2, r3
 800688e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006892:	f000 fd23 	bl	80072dc <fabs>
 8006896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800689a:	ec51 0b10 	vmov	r0, r1, d0
 800689e:	f1b8 0f00 	cmp.w	r8, #0
 80068a2:	d12a      	bne.n	80068fa <__ieee754_pow+0x1ca>
 80068a4:	b12c      	cbz	r4, 80068b2 <__ieee754_pow+0x182>
 80068a6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800695c <__ieee754_pow+0x22c>
 80068aa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80068ae:	45e6      	cmp	lr, ip
 80068b0:	d123      	bne.n	80068fa <__ieee754_pow+0x1ca>
 80068b2:	2f00      	cmp	r7, #0
 80068b4:	da05      	bge.n	80068c2 <__ieee754_pow+0x192>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	2000      	movs	r0, #0
 80068bc:	4927      	ldr	r1, [pc, #156]	; (800695c <__ieee754_pow+0x22c>)
 80068be:	f7f9 ff71 	bl	80007a4 <__aeabi_ddiv>
 80068c2:	f1b9 0f00 	cmp.w	r9, #0
 80068c6:	dab7      	bge.n	8006838 <__ieee754_pow+0x108>
 80068c8:	9b00      	ldr	r3, [sp, #0]
 80068ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80068ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80068d2:	4323      	orrs	r3, r4
 80068d4:	d108      	bne.n	80068e8 <__ieee754_pow+0x1b8>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4610      	mov	r0, r2
 80068dc:	4619      	mov	r1, r3
 80068de:	f7f9 fc7f 	bl	80001e0 <__aeabi_dsub>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	e78d      	b.n	8006804 <__ieee754_pow+0xd4>
 80068e8:	9b00      	ldr	r3, [sp, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d1a4      	bne.n	8006838 <__ieee754_pow+0x108>
 80068ee:	4602      	mov	r2, r0
 80068f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068f4:	4610      	mov	r0, r2
 80068f6:	4619      	mov	r1, r3
 80068f8:	e79e      	b.n	8006838 <__ieee754_pow+0x108>
 80068fa:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80068fe:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8006902:	950a      	str	r5, [sp, #40]	; 0x28
 8006904:	9d00      	ldr	r5, [sp, #0]
 8006906:	46ac      	mov	ip, r5
 8006908:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800690a:	ea5c 0505 	orrs.w	r5, ip, r5
 800690e:	d0e4      	beq.n	80068da <__ieee754_pow+0x1aa>
 8006910:	4b15      	ldr	r3, [pc, #84]	; (8006968 <__ieee754_pow+0x238>)
 8006912:	429e      	cmp	r6, r3
 8006914:	f340 80fc 	ble.w	8006b10 <__ieee754_pow+0x3e0>
 8006918:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800691c:	429e      	cmp	r6, r3
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <__ieee754_pow+0x230>)
 8006920:	dd07      	ble.n	8006932 <__ieee754_pow+0x202>
 8006922:	429c      	cmp	r4, r3
 8006924:	dc0a      	bgt.n	800693c <__ieee754_pow+0x20c>
 8006926:	2f00      	cmp	r7, #0
 8006928:	da84      	bge.n	8006834 <__ieee754_pow+0x104>
 800692a:	a307      	add	r3, pc, #28	; (adr r3, 8006948 <__ieee754_pow+0x218>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	e795      	b.n	800685e <__ieee754_pow+0x12e>
 8006932:	429c      	cmp	r4, r3
 8006934:	dbf7      	blt.n	8006926 <__ieee754_pow+0x1f6>
 8006936:	4b09      	ldr	r3, [pc, #36]	; (800695c <__ieee754_pow+0x22c>)
 8006938:	429c      	cmp	r4, r3
 800693a:	dd17      	ble.n	800696c <__ieee754_pow+0x23c>
 800693c:	2f00      	cmp	r7, #0
 800693e:	dcf4      	bgt.n	800692a <__ieee754_pow+0x1fa>
 8006940:	e778      	b.n	8006834 <__ieee754_pow+0x104>
 8006942:	bf00      	nop
 8006944:	f3af 8000 	nop.w
 8006948:	8800759c 	.word	0x8800759c
 800694c:	7e37e43c 	.word	0x7e37e43c
 8006950:	7ff00000 	.word	0x7ff00000
 8006954:	08007578 	.word	0x08007578
 8006958:	433fffff 	.word	0x433fffff
 800695c:	3ff00000 	.word	0x3ff00000
 8006960:	3fefffff 	.word	0x3fefffff
 8006964:	3fe00000 	.word	0x3fe00000
 8006968:	41e00000 	.word	0x41e00000
 800696c:	4b64      	ldr	r3, [pc, #400]	; (8006b00 <__ieee754_pow+0x3d0>)
 800696e:	2200      	movs	r2, #0
 8006970:	f7f9 fc36 	bl	80001e0 <__aeabi_dsub>
 8006974:	a356      	add	r3, pc, #344	; (adr r3, 8006ad0 <__ieee754_pow+0x3a0>)
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	4604      	mov	r4, r0
 800697c:	460d      	mov	r5, r1
 800697e:	f7f9 fde7 	bl	8000550 <__aeabi_dmul>
 8006982:	a355      	add	r3, pc, #340	; (adr r3, 8006ad8 <__ieee754_pow+0x3a8>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	4606      	mov	r6, r0
 800698a:	460f      	mov	r7, r1
 800698c:	4620      	mov	r0, r4
 800698e:	4629      	mov	r1, r5
 8006990:	f7f9 fdde 	bl	8000550 <__aeabi_dmul>
 8006994:	4b5b      	ldr	r3, [pc, #364]	; (8006b04 <__ieee754_pow+0x3d4>)
 8006996:	4682      	mov	sl, r0
 8006998:	468b      	mov	fp, r1
 800699a:	2200      	movs	r2, #0
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7f9 fdd6 	bl	8000550 <__aeabi_dmul>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	a14d      	add	r1, pc, #308	; (adr r1, 8006ae0 <__ieee754_pow+0x3b0>)
 80069aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069ae:	f7f9 fc17 	bl	80001e0 <__aeabi_dsub>
 80069b2:	4622      	mov	r2, r4
 80069b4:	462b      	mov	r3, r5
 80069b6:	f7f9 fdcb 	bl	8000550 <__aeabi_dmul>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	2000      	movs	r0, #0
 80069c0:	4951      	ldr	r1, [pc, #324]	; (8006b08 <__ieee754_pow+0x3d8>)
 80069c2:	f7f9 fc0d 	bl	80001e0 <__aeabi_dsub>
 80069c6:	4622      	mov	r2, r4
 80069c8:	4680      	mov	r8, r0
 80069ca:	4689      	mov	r9, r1
 80069cc:	462b      	mov	r3, r5
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7f9 fdbd 	bl	8000550 <__aeabi_dmul>
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	f7f9 fdb7 	bl	8000550 <__aeabi_dmul>
 80069e2:	a341      	add	r3, pc, #260	; (adr r3, 8006ae8 <__ieee754_pow+0x3b8>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fdb2 	bl	8000550 <__aeabi_dmul>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4650      	mov	r0, sl
 80069f2:	4659      	mov	r1, fp
 80069f4:	f7f9 fbf4 	bl	80001e0 <__aeabi_dsub>
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	4680      	mov	r8, r0
 80069fe:	4689      	mov	r9, r1
 8006a00:	4630      	mov	r0, r6
 8006a02:	4639      	mov	r1, r7
 8006a04:	f7f9 fbee 	bl	80001e4 <__adddf3>
 8006a08:	2400      	movs	r4, #0
 8006a0a:	4632      	mov	r2, r6
 8006a0c:	463b      	mov	r3, r7
 8006a0e:	4620      	mov	r0, r4
 8006a10:	460d      	mov	r5, r1
 8006a12:	f7f9 fbe5 	bl	80001e0 <__aeabi_dsub>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4649      	mov	r1, r9
 8006a1e:	f7f9 fbdf 	bl	80001e0 <__aeabi_dsub>
 8006a22:	9b00      	ldr	r3, [sp, #0]
 8006a24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a26:	3b01      	subs	r3, #1
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	4682      	mov	sl, r0
 8006a2c:	468b      	mov	fp, r1
 8006a2e:	f040 81f1 	bne.w	8006e14 <__ieee754_pow+0x6e4>
 8006a32:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006af0 <__ieee754_pow+0x3c0>
 8006a36:	eeb0 8a47 	vmov.f32	s16, s14
 8006a3a:	eef0 8a67 	vmov.f32	s17, s15
 8006a3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a42:	2600      	movs	r6, #0
 8006a44:	4632      	mov	r2, r6
 8006a46:	463b      	mov	r3, r7
 8006a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a4c:	f7f9 fbc8 	bl	80001e0 <__aeabi_dsub>
 8006a50:	4622      	mov	r2, r4
 8006a52:	462b      	mov	r3, r5
 8006a54:	f7f9 fd7c 	bl	8000550 <__aeabi_dmul>
 8006a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	4689      	mov	r9, r1
 8006a60:	4650      	mov	r0, sl
 8006a62:	4659      	mov	r1, fp
 8006a64:	f7f9 fd74 	bl	8000550 <__aeabi_dmul>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4640      	mov	r0, r8
 8006a6e:	4649      	mov	r1, r9
 8006a70:	f7f9 fbb8 	bl	80001e4 <__adddf3>
 8006a74:	4632      	mov	r2, r6
 8006a76:	463b      	mov	r3, r7
 8006a78:	4680      	mov	r8, r0
 8006a7a:	4689      	mov	r9, r1
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7f9 fd66 	bl	8000550 <__aeabi_dmul>
 8006a84:	460b      	mov	r3, r1
 8006a86:	4604      	mov	r4, r0
 8006a88:	460d      	mov	r5, r1
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4649      	mov	r1, r9
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7f9 fba8 	bl	80001e4 <__adddf3>
 8006a94:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <__ieee754_pow+0x3dc>)
 8006a96:	4299      	cmp	r1, r3
 8006a98:	ec45 4b19 	vmov	d9, r4, r5
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	468b      	mov	fp, r1
 8006aa2:	f340 82fe 	ble.w	80070a2 <__ieee754_pow+0x972>
 8006aa6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006aaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006aae:	4303      	orrs	r3, r0
 8006ab0:	f000 81f0 	beq.w	8006e94 <__ieee754_pow+0x764>
 8006ab4:	a310      	add	r3, pc, #64	; (adr r3, 8006af8 <__ieee754_pow+0x3c8>)
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	ec51 0b18 	vmov	r0, r1, d8
 8006abe:	f7f9 fd47 	bl	8000550 <__aeabi_dmul>
 8006ac2:	a30d      	add	r3, pc, #52	; (adr r3, 8006af8 <__ieee754_pow+0x3c8>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	e6cb      	b.n	8006862 <__ieee754_pow+0x132>
 8006aca:	bf00      	nop
 8006acc:	f3af 8000 	nop.w
 8006ad0:	60000000 	.word	0x60000000
 8006ad4:	3ff71547 	.word	0x3ff71547
 8006ad8:	f85ddf44 	.word	0xf85ddf44
 8006adc:	3e54ae0b 	.word	0x3e54ae0b
 8006ae0:	55555555 	.word	0x55555555
 8006ae4:	3fd55555 	.word	0x3fd55555
 8006ae8:	652b82fe 	.word	0x652b82fe
 8006aec:	3ff71547 	.word	0x3ff71547
 8006af0:	00000000 	.word	0x00000000
 8006af4:	bff00000 	.word	0xbff00000
 8006af8:	8800759c 	.word	0x8800759c
 8006afc:	7e37e43c 	.word	0x7e37e43c
 8006b00:	3ff00000 	.word	0x3ff00000
 8006b04:	3fd00000 	.word	0x3fd00000
 8006b08:	3fe00000 	.word	0x3fe00000
 8006b0c:	408fffff 	.word	0x408fffff
 8006b10:	4bd7      	ldr	r3, [pc, #860]	; (8006e70 <__ieee754_pow+0x740>)
 8006b12:	ea03 0309 	and.w	r3, r3, r9
 8006b16:	2200      	movs	r2, #0
 8006b18:	b92b      	cbnz	r3, 8006b26 <__ieee754_pow+0x3f6>
 8006b1a:	4bd6      	ldr	r3, [pc, #856]	; (8006e74 <__ieee754_pow+0x744>)
 8006b1c:	f7f9 fd18 	bl	8000550 <__aeabi_dmul>
 8006b20:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006b24:	460c      	mov	r4, r1
 8006b26:	1523      	asrs	r3, r4, #20
 8006b28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006b2c:	4413      	add	r3, r2
 8006b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b30:	4bd1      	ldr	r3, [pc, #836]	; (8006e78 <__ieee754_pow+0x748>)
 8006b32:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006b36:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006b3a:	429c      	cmp	r4, r3
 8006b3c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b40:	dd08      	ble.n	8006b54 <__ieee754_pow+0x424>
 8006b42:	4bce      	ldr	r3, [pc, #824]	; (8006e7c <__ieee754_pow+0x74c>)
 8006b44:	429c      	cmp	r4, r3
 8006b46:	f340 8163 	ble.w	8006e10 <__ieee754_pow+0x6e0>
 8006b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b50:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006b54:	2400      	movs	r4, #0
 8006b56:	00e3      	lsls	r3, r4, #3
 8006b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b5a:	4bc9      	ldr	r3, [pc, #804]	; (8006e80 <__ieee754_pow+0x750>)
 8006b5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b60:	ed93 7b00 	vldr	d7, [r3]
 8006b64:	4629      	mov	r1, r5
 8006b66:	ec53 2b17 	vmov	r2, r3, d7
 8006b6a:	eeb0 8a47 	vmov.f32	s16, s14
 8006b6e:	eef0 8a67 	vmov.f32	s17, s15
 8006b72:	4682      	mov	sl, r0
 8006b74:	f7f9 fb34 	bl	80001e0 <__aeabi_dsub>
 8006b78:	4652      	mov	r2, sl
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	462b      	mov	r3, r5
 8006b80:	ec51 0b18 	vmov	r0, r1, d8
 8006b84:	f7f9 fb2e 	bl	80001e4 <__adddf3>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	2000      	movs	r0, #0
 8006b8e:	49bd      	ldr	r1, [pc, #756]	; (8006e84 <__ieee754_pow+0x754>)
 8006b90:	f7f9 fe08 	bl	80007a4 <__aeabi_ddiv>
 8006b94:	ec41 0b19 	vmov	d9, r0, r1
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f7f9 fcd6 	bl	8000550 <__aeabi_dmul>
 8006ba4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ba8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9304      	str	r3, [sp, #16]
 8006bb4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006bb8:	46ab      	mov	fp, r5
 8006bba:	106d      	asrs	r5, r5, #1
 8006bbc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006bc0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006bc4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006bc8:	2200      	movs	r2, #0
 8006bca:	4640      	mov	r0, r8
 8006bcc:	4649      	mov	r1, r9
 8006bce:	4614      	mov	r4, r2
 8006bd0:	461d      	mov	r5, r3
 8006bd2:	f7f9 fcbd 	bl	8000550 <__aeabi_dmul>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4630      	mov	r0, r6
 8006bdc:	4639      	mov	r1, r7
 8006bde:	f7f9 faff 	bl	80001e0 <__aeabi_dsub>
 8006be2:	ec53 2b18 	vmov	r2, r3, d8
 8006be6:	4606      	mov	r6, r0
 8006be8:	460f      	mov	r7, r1
 8006bea:	4620      	mov	r0, r4
 8006bec:	4629      	mov	r1, r5
 8006bee:	f7f9 faf7 	bl	80001e0 <__aeabi_dsub>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	f7f9 faf1 	bl	80001e0 <__aeabi_dsub>
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	f7f9 fca5 	bl	8000550 <__aeabi_dmul>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	4639      	mov	r1, r7
 8006c0e:	f7f9 fae7 	bl	80001e0 <__aeabi_dsub>
 8006c12:	ec53 2b19 	vmov	r2, r3, d9
 8006c16:	f7f9 fc9b 	bl	8000550 <__aeabi_dmul>
 8006c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c1e:	ec41 0b18 	vmov	d8, r0, r1
 8006c22:	4610      	mov	r0, r2
 8006c24:	4619      	mov	r1, r3
 8006c26:	f7f9 fc93 	bl	8000550 <__aeabi_dmul>
 8006c2a:	a37d      	add	r3, pc, #500	; (adr r3, 8006e20 <__ieee754_pow+0x6f0>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	4604      	mov	r4, r0
 8006c32:	460d      	mov	r5, r1
 8006c34:	f7f9 fc8c 	bl	8000550 <__aeabi_dmul>
 8006c38:	a37b      	add	r3, pc, #492	; (adr r3, 8006e28 <__ieee754_pow+0x6f8>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fad1 	bl	80001e4 <__adddf3>
 8006c42:	4622      	mov	r2, r4
 8006c44:	462b      	mov	r3, r5
 8006c46:	f7f9 fc83 	bl	8000550 <__aeabi_dmul>
 8006c4a:	a379      	add	r3, pc, #484	; (adr r3, 8006e30 <__ieee754_pow+0x700>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fac8 	bl	80001e4 <__adddf3>
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	f7f9 fc7a 	bl	8000550 <__aeabi_dmul>
 8006c5c:	a376      	add	r3, pc, #472	; (adr r3, 8006e38 <__ieee754_pow+0x708>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f7f9 fabf 	bl	80001e4 <__adddf3>
 8006c66:	4622      	mov	r2, r4
 8006c68:	462b      	mov	r3, r5
 8006c6a:	f7f9 fc71 	bl	8000550 <__aeabi_dmul>
 8006c6e:	a374      	add	r3, pc, #464	; (adr r3, 8006e40 <__ieee754_pow+0x710>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fab6 	bl	80001e4 <__adddf3>
 8006c78:	4622      	mov	r2, r4
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	f7f9 fc68 	bl	8000550 <__aeabi_dmul>
 8006c80:	a371      	add	r3, pc, #452	; (adr r3, 8006e48 <__ieee754_pow+0x718>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 faad 	bl	80001e4 <__adddf3>
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	460f      	mov	r7, r1
 8006c90:	462b      	mov	r3, r5
 8006c92:	4620      	mov	r0, r4
 8006c94:	4629      	mov	r1, r5
 8006c96:	f7f9 fc5b 	bl	8000550 <__aeabi_dmul>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fc55 	bl	8000550 <__aeabi_dmul>
 8006ca6:	4642      	mov	r2, r8
 8006ca8:	4604      	mov	r4, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	464b      	mov	r3, r9
 8006cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb2:	f7f9 fa97 	bl	80001e4 <__adddf3>
 8006cb6:	ec53 2b18 	vmov	r2, r3, d8
 8006cba:	f7f9 fc49 	bl	8000550 <__aeabi_dmul>
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	f7f9 fa8f 	bl	80001e4 <__adddf3>
 8006cc6:	4642      	mov	r2, r8
 8006cc8:	4682      	mov	sl, r0
 8006cca:	468b      	mov	fp, r1
 8006ccc:	464b      	mov	r3, r9
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4649      	mov	r1, r9
 8006cd2:	f7f9 fc3d 	bl	8000550 <__aeabi_dmul>
 8006cd6:	4b6c      	ldr	r3, [pc, #432]	; (8006e88 <__ieee754_pow+0x758>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	f7f9 fa81 	bl	80001e4 <__adddf3>
 8006ce2:	4652      	mov	r2, sl
 8006ce4:	465b      	mov	r3, fp
 8006ce6:	f7f9 fa7d 	bl	80001e4 <__adddf3>
 8006cea:	9c04      	ldr	r4, [sp, #16]
 8006cec:	460d      	mov	r5, r1
 8006cee:	4622      	mov	r2, r4
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4649      	mov	r1, r9
 8006cf6:	f7f9 fc2b 	bl	8000550 <__aeabi_dmul>
 8006cfa:	4b63      	ldr	r3, [pc, #396]	; (8006e88 <__ieee754_pow+0x758>)
 8006cfc:	4680      	mov	r8, r0
 8006cfe:	4689      	mov	r9, r1
 8006d00:	2200      	movs	r2, #0
 8006d02:	4620      	mov	r0, r4
 8006d04:	4629      	mov	r1, r5
 8006d06:	f7f9 fa6b 	bl	80001e0 <__aeabi_dsub>
 8006d0a:	4632      	mov	r2, r6
 8006d0c:	463b      	mov	r3, r7
 8006d0e:	f7f9 fa67 	bl	80001e0 <__aeabi_dsub>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4650      	mov	r0, sl
 8006d18:	4659      	mov	r1, fp
 8006d1a:	f7f9 fa61 	bl	80001e0 <__aeabi_dsub>
 8006d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d22:	f7f9 fc15 	bl	8000550 <__aeabi_dmul>
 8006d26:	4622      	mov	r2, r4
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	462b      	mov	r3, r5
 8006d2e:	ec51 0b18 	vmov	r0, r1, d8
 8006d32:	f7f9 fc0d 	bl	8000550 <__aeabi_dmul>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7f9 fa51 	bl	80001e4 <__adddf3>
 8006d42:	4606      	mov	r6, r0
 8006d44:	460f      	mov	r7, r1
 8006d46:	4602      	mov	r2, r0
 8006d48:	460b      	mov	r3, r1
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	f7f9 fa49 	bl	80001e4 <__adddf3>
 8006d52:	9c04      	ldr	r4, [sp, #16]
 8006d54:	a33e      	add	r3, pc, #248	; (adr r3, 8006e50 <__ieee754_pow+0x720>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	f7f9 fbf7 	bl	8000550 <__aeabi_dmul>
 8006d62:	4642      	mov	r2, r8
 8006d64:	ec41 0b18 	vmov	d8, r0, r1
 8006d68:	464b      	mov	r3, r9
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	f7f9 fa37 	bl	80001e0 <__aeabi_dsub>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4630      	mov	r0, r6
 8006d78:	4639      	mov	r1, r7
 8006d7a:	f7f9 fa31 	bl	80001e0 <__aeabi_dsub>
 8006d7e:	a336      	add	r3, pc, #216	; (adr r3, 8006e58 <__ieee754_pow+0x728>)
 8006d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d84:	f7f9 fbe4 	bl	8000550 <__aeabi_dmul>
 8006d88:	a335      	add	r3, pc, #212	; (adr r3, 8006e60 <__ieee754_pow+0x730>)
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460f      	mov	r7, r1
 8006d92:	4620      	mov	r0, r4
 8006d94:	4629      	mov	r1, r5
 8006d96:	f7f9 fbdb 	bl	8000550 <__aeabi_dmul>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	4630      	mov	r0, r6
 8006da0:	4639      	mov	r1, r7
 8006da2:	f7f9 fa1f 	bl	80001e4 <__adddf3>
 8006da6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006da8:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <__ieee754_pow+0x75c>)
 8006daa:	4413      	add	r3, r2
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	f7f9 fa18 	bl	80001e4 <__adddf3>
 8006db4:	4682      	mov	sl, r0
 8006db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006db8:	468b      	mov	fp, r1
 8006dba:	f7f9 fb5f 	bl	800047c <__aeabi_i2d>
 8006dbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dc0:	4b33      	ldr	r3, [pc, #204]	; (8006e90 <__ieee754_pow+0x760>)
 8006dc2:	4413      	add	r3, r2
 8006dc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dc8:	4606      	mov	r6, r0
 8006dca:	460f      	mov	r7, r1
 8006dcc:	4652      	mov	r2, sl
 8006dce:	465b      	mov	r3, fp
 8006dd0:	ec51 0b18 	vmov	r0, r1, d8
 8006dd4:	f7f9 fa06 	bl	80001e4 <__adddf3>
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	f7f9 fa02 	bl	80001e4 <__adddf3>
 8006de0:	4632      	mov	r2, r6
 8006de2:	463b      	mov	r3, r7
 8006de4:	f7f9 f9fe 	bl	80001e4 <__adddf3>
 8006de8:	9c04      	ldr	r4, [sp, #16]
 8006dea:	4632      	mov	r2, r6
 8006dec:	463b      	mov	r3, r7
 8006dee:	4620      	mov	r0, r4
 8006df0:	460d      	mov	r5, r1
 8006df2:	f7f9 f9f5 	bl	80001e0 <__aeabi_dsub>
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	f7f9 f9f1 	bl	80001e0 <__aeabi_dsub>
 8006dfe:	ec53 2b18 	vmov	r2, r3, d8
 8006e02:	f7f9 f9ed 	bl	80001e0 <__aeabi_dsub>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4650      	mov	r0, sl
 8006e0c:	4659      	mov	r1, fp
 8006e0e:	e606      	b.n	8006a1e <__ieee754_pow+0x2ee>
 8006e10:	2401      	movs	r4, #1
 8006e12:	e6a0      	b.n	8006b56 <__ieee754_pow+0x426>
 8006e14:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8006e68 <__ieee754_pow+0x738>
 8006e18:	e60d      	b.n	8006a36 <__ieee754_pow+0x306>
 8006e1a:	bf00      	nop
 8006e1c:	f3af 8000 	nop.w
 8006e20:	4a454eef 	.word	0x4a454eef
 8006e24:	3fca7e28 	.word	0x3fca7e28
 8006e28:	93c9db65 	.word	0x93c9db65
 8006e2c:	3fcd864a 	.word	0x3fcd864a
 8006e30:	a91d4101 	.word	0xa91d4101
 8006e34:	3fd17460 	.word	0x3fd17460
 8006e38:	518f264d 	.word	0x518f264d
 8006e3c:	3fd55555 	.word	0x3fd55555
 8006e40:	db6fabff 	.word	0xdb6fabff
 8006e44:	3fdb6db6 	.word	0x3fdb6db6
 8006e48:	33333303 	.word	0x33333303
 8006e4c:	3fe33333 	.word	0x3fe33333
 8006e50:	e0000000 	.word	0xe0000000
 8006e54:	3feec709 	.word	0x3feec709
 8006e58:	dc3a03fd 	.word	0xdc3a03fd
 8006e5c:	3feec709 	.word	0x3feec709
 8006e60:	145b01f5 	.word	0x145b01f5
 8006e64:	be3e2fe0 	.word	0xbe3e2fe0
 8006e68:	00000000 	.word	0x00000000
 8006e6c:	3ff00000 	.word	0x3ff00000
 8006e70:	7ff00000 	.word	0x7ff00000
 8006e74:	43400000 	.word	0x43400000
 8006e78:	0003988e 	.word	0x0003988e
 8006e7c:	000bb679 	.word	0x000bb679
 8006e80:	08007580 	.word	0x08007580
 8006e84:	3ff00000 	.word	0x3ff00000
 8006e88:	40080000 	.word	0x40080000
 8006e8c:	080075a0 	.word	0x080075a0
 8006e90:	08007590 	.word	0x08007590
 8006e94:	a3b5      	add	r3, pc, #724	; (adr r3, 800716c <__ieee754_pow+0xa3c>)
 8006e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	4649      	mov	r1, r9
 8006e9e:	f7f9 f9a1 	bl	80001e4 <__adddf3>
 8006ea2:	4622      	mov	r2, r4
 8006ea4:	ec41 0b1a 	vmov	d10, r0, r1
 8006ea8:	462b      	mov	r3, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	4639      	mov	r1, r7
 8006eae:	f7f9 f997 	bl	80001e0 <__aeabi_dsub>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	ec51 0b1a 	vmov	r0, r1, d10
 8006eba:	f7f9 fdd9 	bl	8000a70 <__aeabi_dcmpgt>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	f47f adf8 	bne.w	8006ab4 <__ieee754_pow+0x384>
 8006ec4:	4aa4      	ldr	r2, [pc, #656]	; (8007158 <__ieee754_pow+0xa28>)
 8006ec6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	f340 810b 	ble.w	80070e6 <__ieee754_pow+0x9b6>
 8006ed0:	151b      	asrs	r3, r3, #20
 8006ed2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006ed6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006eda:	fa4a f303 	asr.w	r3, sl, r3
 8006ede:	445b      	add	r3, fp
 8006ee0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8006ee4:	4e9d      	ldr	r6, [pc, #628]	; (800715c <__ieee754_pow+0xa2c>)
 8006ee6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006eea:	4116      	asrs	r6, r2
 8006eec:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006ef0:	2000      	movs	r0, #0
 8006ef2:	ea23 0106 	bic.w	r1, r3, r6
 8006ef6:	f1c2 0214 	rsb	r2, r2, #20
 8006efa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006efe:	fa4a fa02 	asr.w	sl, sl, r2
 8006f02:	f1bb 0f00 	cmp.w	fp, #0
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	bfb8      	it	lt
 8006f10:	f1ca 0a00 	rsblt	sl, sl, #0
 8006f14:	f7f9 f964 	bl	80001e0 <__aeabi_dsub>
 8006f18:	ec41 0b19 	vmov	d9, r0, r1
 8006f1c:	4642      	mov	r2, r8
 8006f1e:	464b      	mov	r3, r9
 8006f20:	ec51 0b19 	vmov	r0, r1, d9
 8006f24:	f7f9 f95e 	bl	80001e4 <__adddf3>
 8006f28:	2400      	movs	r4, #0
 8006f2a:	a379      	add	r3, pc, #484	; (adr r3, 8007110 <__ieee754_pow+0x9e0>)
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	4620      	mov	r0, r4
 8006f32:	460d      	mov	r5, r1
 8006f34:	f7f9 fb0c 	bl	8000550 <__aeabi_dmul>
 8006f38:	ec53 2b19 	vmov	r2, r3, d9
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	4620      	mov	r0, r4
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7f9 f94c 	bl	80001e0 <__aeabi_dsub>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	f7f9 f946 	bl	80001e0 <__aeabi_dsub>
 8006f54:	a370      	add	r3, pc, #448	; (adr r3, 8007118 <__ieee754_pow+0x9e8>)
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 faf9 	bl	8000550 <__aeabi_dmul>
 8006f5e:	a370      	add	r3, pc, #448	; (adr r3, 8007120 <__ieee754_pow+0x9f0>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	4680      	mov	r8, r0
 8006f66:	4689      	mov	r9, r1
 8006f68:	4620      	mov	r0, r4
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	f7f9 faf0 	bl	8000550 <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	4640      	mov	r0, r8
 8006f76:	4649      	mov	r1, r9
 8006f78:	f7f9 f934 	bl	80001e4 <__adddf3>
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	460d      	mov	r5, r1
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 f92c 	bl	80001e4 <__adddf3>
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	463b      	mov	r3, r7
 8006f90:	4680      	mov	r8, r0
 8006f92:	4689      	mov	r9, r1
 8006f94:	f7f9 f924 	bl	80001e0 <__aeabi_dsub>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	f7f9 f91e 	bl	80001e0 <__aeabi_dsub>
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460f      	mov	r7, r1
 8006faa:	464b      	mov	r3, r9
 8006fac:	4640      	mov	r0, r8
 8006fae:	4649      	mov	r1, r9
 8006fb0:	f7f9 face 	bl	8000550 <__aeabi_dmul>
 8006fb4:	a35c      	add	r3, pc, #368	; (adr r3, 8007128 <__ieee754_pow+0x9f8>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	f7f9 fac7 	bl	8000550 <__aeabi_dmul>
 8006fc2:	a35b      	add	r3, pc, #364	; (adr r3, 8007130 <__ieee754_pow+0xa00>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f90a 	bl	80001e0 <__aeabi_dsub>
 8006fcc:	4622      	mov	r2, r4
 8006fce:	462b      	mov	r3, r5
 8006fd0:	f7f9 fabe 	bl	8000550 <__aeabi_dmul>
 8006fd4:	a358      	add	r3, pc, #352	; (adr r3, 8007138 <__ieee754_pow+0xa08>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f903 	bl	80001e4 <__adddf3>
 8006fde:	4622      	mov	r2, r4
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	f7f9 fab5 	bl	8000550 <__aeabi_dmul>
 8006fe6:	a356      	add	r3, pc, #344	; (adr r3, 8007140 <__ieee754_pow+0xa10>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f8f8 	bl	80001e0 <__aeabi_dsub>
 8006ff0:	4622      	mov	r2, r4
 8006ff2:	462b      	mov	r3, r5
 8006ff4:	f7f9 faac 	bl	8000550 <__aeabi_dmul>
 8006ff8:	a353      	add	r3, pc, #332	; (adr r3, 8007148 <__ieee754_pow+0xa18>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 f8f1 	bl	80001e4 <__adddf3>
 8007002:	4622      	mov	r2, r4
 8007004:	462b      	mov	r3, r5
 8007006:	f7f9 faa3 	bl	8000550 <__aeabi_dmul>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4640      	mov	r0, r8
 8007010:	4649      	mov	r1, r9
 8007012:	f7f9 f8e5 	bl	80001e0 <__aeabi_dsub>
 8007016:	4604      	mov	r4, r0
 8007018:	460d      	mov	r5, r1
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4640      	mov	r0, r8
 8007020:	4649      	mov	r1, r9
 8007022:	f7f9 fa95 	bl	8000550 <__aeabi_dmul>
 8007026:	2200      	movs	r2, #0
 8007028:	ec41 0b19 	vmov	d9, r0, r1
 800702c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007030:	4620      	mov	r0, r4
 8007032:	4629      	mov	r1, r5
 8007034:	f7f9 f8d4 	bl	80001e0 <__aeabi_dsub>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	ec51 0b19 	vmov	r0, r1, d9
 8007040:	f7f9 fbb0 	bl	80007a4 <__aeabi_ddiv>
 8007044:	4632      	mov	r2, r6
 8007046:	4604      	mov	r4, r0
 8007048:	460d      	mov	r5, r1
 800704a:	463b      	mov	r3, r7
 800704c:	4640      	mov	r0, r8
 800704e:	4649      	mov	r1, r9
 8007050:	f7f9 fa7e 	bl	8000550 <__aeabi_dmul>
 8007054:	4632      	mov	r2, r6
 8007056:	463b      	mov	r3, r7
 8007058:	f7f9 f8c4 	bl	80001e4 <__adddf3>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4620      	mov	r0, r4
 8007062:	4629      	mov	r1, r5
 8007064:	f7f9 f8bc 	bl	80001e0 <__aeabi_dsub>
 8007068:	4642      	mov	r2, r8
 800706a:	464b      	mov	r3, r9
 800706c:	f7f9 f8b8 	bl	80001e0 <__aeabi_dsub>
 8007070:	460b      	mov	r3, r1
 8007072:	4602      	mov	r2, r0
 8007074:	493a      	ldr	r1, [pc, #232]	; (8007160 <__ieee754_pow+0xa30>)
 8007076:	2000      	movs	r0, #0
 8007078:	f7f9 f8b2 	bl	80001e0 <__aeabi_dsub>
 800707c:	e9cd 0100 	strd	r0, r1, [sp]
 8007080:	9b01      	ldr	r3, [sp, #4]
 8007082:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800708a:	da2f      	bge.n	80070ec <__ieee754_pow+0x9bc>
 800708c:	4650      	mov	r0, sl
 800708e:	ed9d 0b00 	vldr	d0, [sp]
 8007092:	f000 f9cd 	bl	8007430 <scalbn>
 8007096:	ec51 0b10 	vmov	r0, r1, d0
 800709a:	ec53 2b18 	vmov	r2, r3, d8
 800709e:	f7ff bbe0 	b.w	8006862 <__ieee754_pow+0x132>
 80070a2:	4b30      	ldr	r3, [pc, #192]	; (8007164 <__ieee754_pow+0xa34>)
 80070a4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80070a8:	429e      	cmp	r6, r3
 80070aa:	f77f af0b 	ble.w	8006ec4 <__ieee754_pow+0x794>
 80070ae:	4b2e      	ldr	r3, [pc, #184]	; (8007168 <__ieee754_pow+0xa38>)
 80070b0:	440b      	add	r3, r1
 80070b2:	4303      	orrs	r3, r0
 80070b4:	d00b      	beq.n	80070ce <__ieee754_pow+0x99e>
 80070b6:	a326      	add	r3, pc, #152	; (adr r3, 8007150 <__ieee754_pow+0xa20>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	ec51 0b18 	vmov	r0, r1, d8
 80070c0:	f7f9 fa46 	bl	8000550 <__aeabi_dmul>
 80070c4:	a322      	add	r3, pc, #136	; (adr r3, 8007150 <__ieee754_pow+0xa20>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	f7ff bbca 	b.w	8006862 <__ieee754_pow+0x132>
 80070ce:	4622      	mov	r2, r4
 80070d0:	462b      	mov	r3, r5
 80070d2:	f7f9 f885 	bl	80001e0 <__aeabi_dsub>
 80070d6:	4642      	mov	r2, r8
 80070d8:	464b      	mov	r3, r9
 80070da:	f7f9 fcbf 	bl	8000a5c <__aeabi_dcmpge>
 80070de:	2800      	cmp	r0, #0
 80070e0:	f43f aef0 	beq.w	8006ec4 <__ieee754_pow+0x794>
 80070e4:	e7e7      	b.n	80070b6 <__ieee754_pow+0x986>
 80070e6:	f04f 0a00 	mov.w	sl, #0
 80070ea:	e717      	b.n	8006f1c <__ieee754_pow+0x7ec>
 80070ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070f0:	4619      	mov	r1, r3
 80070f2:	e7d2      	b.n	800709a <__ieee754_pow+0x96a>
 80070f4:	491a      	ldr	r1, [pc, #104]	; (8007160 <__ieee754_pow+0xa30>)
 80070f6:	2000      	movs	r0, #0
 80070f8:	f7ff bb9e 	b.w	8006838 <__ieee754_pow+0x108>
 80070fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007100:	f7ff bb9a 	b.w	8006838 <__ieee754_pow+0x108>
 8007104:	9000      	str	r0, [sp, #0]
 8007106:	f7ff bb76 	b.w	80067f6 <__ieee754_pow+0xc6>
 800710a:	2100      	movs	r1, #0
 800710c:	f7ff bb60 	b.w	80067d0 <__ieee754_pow+0xa0>
 8007110:	00000000 	.word	0x00000000
 8007114:	3fe62e43 	.word	0x3fe62e43
 8007118:	fefa39ef 	.word	0xfefa39ef
 800711c:	3fe62e42 	.word	0x3fe62e42
 8007120:	0ca86c39 	.word	0x0ca86c39
 8007124:	be205c61 	.word	0xbe205c61
 8007128:	72bea4d0 	.word	0x72bea4d0
 800712c:	3e663769 	.word	0x3e663769
 8007130:	c5d26bf1 	.word	0xc5d26bf1
 8007134:	3ebbbd41 	.word	0x3ebbbd41
 8007138:	af25de2c 	.word	0xaf25de2c
 800713c:	3f11566a 	.word	0x3f11566a
 8007140:	16bebd93 	.word	0x16bebd93
 8007144:	3f66c16c 	.word	0x3f66c16c
 8007148:	5555553e 	.word	0x5555553e
 800714c:	3fc55555 	.word	0x3fc55555
 8007150:	c2f8f359 	.word	0xc2f8f359
 8007154:	01a56e1f 	.word	0x01a56e1f
 8007158:	3fe00000 	.word	0x3fe00000
 800715c:	000fffff 	.word	0x000fffff
 8007160:	3ff00000 	.word	0x3ff00000
 8007164:	4090cbff 	.word	0x4090cbff
 8007168:	3f6f3400 	.word	0x3f6f3400
 800716c:	652b82fe 	.word	0x652b82fe
 8007170:	3c971547 	.word	0x3c971547

08007174 <__ieee754_sqrt>:
 8007174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007178:	ec55 4b10 	vmov	r4, r5, d0
 800717c:	4e56      	ldr	r6, [pc, #344]	; (80072d8 <__ieee754_sqrt+0x164>)
 800717e:	43ae      	bics	r6, r5
 8007180:	ee10 0a10 	vmov	r0, s0
 8007184:	ee10 3a10 	vmov	r3, s0
 8007188:	4629      	mov	r1, r5
 800718a:	462a      	mov	r2, r5
 800718c:	d110      	bne.n	80071b0 <__ieee754_sqrt+0x3c>
 800718e:	ee10 2a10 	vmov	r2, s0
 8007192:	462b      	mov	r3, r5
 8007194:	f7f9 f9dc 	bl	8000550 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4620      	mov	r0, r4
 800719e:	4629      	mov	r1, r5
 80071a0:	f7f9 f820 	bl	80001e4 <__adddf3>
 80071a4:	4604      	mov	r4, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	ec45 4b10 	vmov	d0, r4, r5
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	dc10      	bgt.n	80071d6 <__ieee754_sqrt+0x62>
 80071b4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80071b8:	4330      	orrs	r0, r6
 80071ba:	d0f5      	beq.n	80071a8 <__ieee754_sqrt+0x34>
 80071bc:	b15d      	cbz	r5, 80071d6 <__ieee754_sqrt+0x62>
 80071be:	ee10 2a10 	vmov	r2, s0
 80071c2:	462b      	mov	r3, r5
 80071c4:	ee10 0a10 	vmov	r0, s0
 80071c8:	f7f9 f80a 	bl	80001e0 <__aeabi_dsub>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	f7f9 fae8 	bl	80007a4 <__aeabi_ddiv>
 80071d4:	e7e6      	b.n	80071a4 <__ieee754_sqrt+0x30>
 80071d6:	1509      	asrs	r1, r1, #20
 80071d8:	d076      	beq.n	80072c8 <__ieee754_sqrt+0x154>
 80071da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80071de:	07ce      	lsls	r6, r1, #31
 80071e0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80071e4:	bf5e      	ittt	pl
 80071e6:	0fda      	lsrpl	r2, r3, #31
 80071e8:	005b      	lslpl	r3, r3, #1
 80071ea:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80071ee:	0fda      	lsrs	r2, r3, #31
 80071f0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80071f4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80071f8:	2000      	movs	r0, #0
 80071fa:	106d      	asrs	r5, r5, #1
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	f04f 0e16 	mov.w	lr, #22
 8007202:	4684      	mov	ip, r0
 8007204:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007208:	eb0c 0401 	add.w	r4, ip, r1
 800720c:	4294      	cmp	r4, r2
 800720e:	bfde      	ittt	le
 8007210:	1b12      	suble	r2, r2, r4
 8007212:	eb04 0c01 	addle.w	ip, r4, r1
 8007216:	1840      	addle	r0, r0, r1
 8007218:	0052      	lsls	r2, r2, #1
 800721a:	f1be 0e01 	subs.w	lr, lr, #1
 800721e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007222:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007226:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800722a:	d1ed      	bne.n	8007208 <__ieee754_sqrt+0x94>
 800722c:	4671      	mov	r1, lr
 800722e:	2720      	movs	r7, #32
 8007230:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007234:	4562      	cmp	r2, ip
 8007236:	eb04 060e 	add.w	r6, r4, lr
 800723a:	dc02      	bgt.n	8007242 <__ieee754_sqrt+0xce>
 800723c:	d113      	bne.n	8007266 <__ieee754_sqrt+0xf2>
 800723e:	429e      	cmp	r6, r3
 8007240:	d811      	bhi.n	8007266 <__ieee754_sqrt+0xf2>
 8007242:	2e00      	cmp	r6, #0
 8007244:	eb06 0e04 	add.w	lr, r6, r4
 8007248:	da43      	bge.n	80072d2 <__ieee754_sqrt+0x15e>
 800724a:	f1be 0f00 	cmp.w	lr, #0
 800724e:	db40      	blt.n	80072d2 <__ieee754_sqrt+0x15e>
 8007250:	f10c 0801 	add.w	r8, ip, #1
 8007254:	eba2 020c 	sub.w	r2, r2, ip
 8007258:	429e      	cmp	r6, r3
 800725a:	bf88      	it	hi
 800725c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007260:	1b9b      	subs	r3, r3, r6
 8007262:	4421      	add	r1, r4
 8007264:	46c4      	mov	ip, r8
 8007266:	0052      	lsls	r2, r2, #1
 8007268:	3f01      	subs	r7, #1
 800726a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800726e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007272:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007276:	d1dd      	bne.n	8007234 <__ieee754_sqrt+0xc0>
 8007278:	4313      	orrs	r3, r2
 800727a:	d006      	beq.n	800728a <__ieee754_sqrt+0x116>
 800727c:	1c4c      	adds	r4, r1, #1
 800727e:	bf13      	iteet	ne
 8007280:	3101      	addne	r1, #1
 8007282:	3001      	addeq	r0, #1
 8007284:	4639      	moveq	r1, r7
 8007286:	f021 0101 	bicne.w	r1, r1, #1
 800728a:	1043      	asrs	r3, r0, #1
 800728c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007290:	0849      	lsrs	r1, r1, #1
 8007292:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007296:	07c2      	lsls	r2, r0, #31
 8007298:	bf48      	it	mi
 800729a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800729e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80072a2:	460c      	mov	r4, r1
 80072a4:	463d      	mov	r5, r7
 80072a6:	e77f      	b.n	80071a8 <__ieee754_sqrt+0x34>
 80072a8:	0ada      	lsrs	r2, r3, #11
 80072aa:	3815      	subs	r0, #21
 80072ac:	055b      	lsls	r3, r3, #21
 80072ae:	2a00      	cmp	r2, #0
 80072b0:	d0fa      	beq.n	80072a8 <__ieee754_sqrt+0x134>
 80072b2:	02d7      	lsls	r7, r2, #11
 80072b4:	d50a      	bpl.n	80072cc <__ieee754_sqrt+0x158>
 80072b6:	f1c1 0420 	rsb	r4, r1, #32
 80072ba:	fa23 f404 	lsr.w	r4, r3, r4
 80072be:	1e4d      	subs	r5, r1, #1
 80072c0:	408b      	lsls	r3, r1
 80072c2:	4322      	orrs	r2, r4
 80072c4:	1b41      	subs	r1, r0, r5
 80072c6:	e788      	b.n	80071da <__ieee754_sqrt+0x66>
 80072c8:	4608      	mov	r0, r1
 80072ca:	e7f0      	b.n	80072ae <__ieee754_sqrt+0x13a>
 80072cc:	0052      	lsls	r2, r2, #1
 80072ce:	3101      	adds	r1, #1
 80072d0:	e7ef      	b.n	80072b2 <__ieee754_sqrt+0x13e>
 80072d2:	46e0      	mov	r8, ip
 80072d4:	e7be      	b.n	8007254 <__ieee754_sqrt+0xe0>
 80072d6:	bf00      	nop
 80072d8:	7ff00000 	.word	0x7ff00000

080072dc <fabs>:
 80072dc:	ec51 0b10 	vmov	r0, r1, d0
 80072e0:	ee10 2a10 	vmov	r2, s0
 80072e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072e8:	ec43 2b10 	vmov	d0, r2, r3
 80072ec:	4770      	bx	lr

080072ee <finite>:
 80072ee:	b082      	sub	sp, #8
 80072f0:	ed8d 0b00 	vstr	d0, [sp]
 80072f4:	9801      	ldr	r0, [sp, #4]
 80072f6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80072fa:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80072fe:	0fc0      	lsrs	r0, r0, #31
 8007300:	b002      	add	sp, #8
 8007302:	4770      	bx	lr
 8007304:	0000      	movs	r0, r0
	...

08007308 <nan>:
 8007308:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007310 <nan+0x8>
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop
 8007310:	00000000 	.word	0x00000000
 8007314:	7ff80000 	.word	0x7ff80000

08007318 <rint>:
 8007318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800731a:	ec51 0b10 	vmov	r0, r1, d0
 800731e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007322:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007326:	2e13      	cmp	r6, #19
 8007328:	ee10 4a10 	vmov	r4, s0
 800732c:	460b      	mov	r3, r1
 800732e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007332:	dc58      	bgt.n	80073e6 <rint+0xce>
 8007334:	2e00      	cmp	r6, #0
 8007336:	da2b      	bge.n	8007390 <rint+0x78>
 8007338:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800733c:	4302      	orrs	r2, r0
 800733e:	d023      	beq.n	8007388 <rint+0x70>
 8007340:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007344:	4302      	orrs	r2, r0
 8007346:	4254      	negs	r4, r2
 8007348:	4314      	orrs	r4, r2
 800734a:	0c4b      	lsrs	r3, r1, #17
 800734c:	0b24      	lsrs	r4, r4, #12
 800734e:	045b      	lsls	r3, r3, #17
 8007350:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007354:	ea44 0103 	orr.w	r1, r4, r3
 8007358:	4b32      	ldr	r3, [pc, #200]	; (8007424 <rint+0x10c>)
 800735a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800735e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	4630      	mov	r0, r6
 8007368:	4639      	mov	r1, r7
 800736a:	f7f8 ff3b 	bl	80001e4 <__adddf3>
 800736e:	e9cd 0100 	strd	r0, r1, [sp]
 8007372:	463b      	mov	r3, r7
 8007374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007378:	4632      	mov	r2, r6
 800737a:	f7f8 ff31 	bl	80001e0 <__aeabi_dsub>
 800737e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007382:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007386:	4639      	mov	r1, r7
 8007388:	ec41 0b10 	vmov	d0, r0, r1
 800738c:	b003      	add	sp, #12
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	4a25      	ldr	r2, [pc, #148]	; (8007428 <rint+0x110>)
 8007392:	4132      	asrs	r2, r6
 8007394:	ea01 0702 	and.w	r7, r1, r2
 8007398:	4307      	orrs	r7, r0
 800739a:	d0f5      	beq.n	8007388 <rint+0x70>
 800739c:	0851      	lsrs	r1, r2, #1
 800739e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80073a2:	4314      	orrs	r4, r2
 80073a4:	d00c      	beq.n	80073c0 <rint+0xa8>
 80073a6:	ea23 0201 	bic.w	r2, r3, r1
 80073aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073ae:	2e13      	cmp	r6, #19
 80073b0:	fa43 f606 	asr.w	r6, r3, r6
 80073b4:	bf0c      	ite	eq
 80073b6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80073ba:	2400      	movne	r4, #0
 80073bc:	ea42 0306 	orr.w	r3, r2, r6
 80073c0:	4918      	ldr	r1, [pc, #96]	; (8007424 <rint+0x10c>)
 80073c2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80073c6:	4622      	mov	r2, r4
 80073c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 80073cc:	4620      	mov	r0, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	f7f8 ff08 	bl	80001e4 <__adddf3>
 80073d4:	e9cd 0100 	strd	r0, r1, [sp]
 80073d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073dc:	4622      	mov	r2, r4
 80073de:	462b      	mov	r3, r5
 80073e0:	f7f8 fefe 	bl	80001e0 <__aeabi_dsub>
 80073e4:	e7d0      	b.n	8007388 <rint+0x70>
 80073e6:	2e33      	cmp	r6, #51	; 0x33
 80073e8:	dd07      	ble.n	80073fa <rint+0xe2>
 80073ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80073ee:	d1cb      	bne.n	8007388 <rint+0x70>
 80073f0:	ee10 2a10 	vmov	r2, s0
 80073f4:	f7f8 fef6 	bl	80001e4 <__adddf3>
 80073f8:	e7c6      	b.n	8007388 <rint+0x70>
 80073fa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80073fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007402:	40d6      	lsrs	r6, r2
 8007404:	4230      	tst	r0, r6
 8007406:	d0bf      	beq.n	8007388 <rint+0x70>
 8007408:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800740c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007410:	bf1f      	itttt	ne
 8007412:	ea24 0101 	bicne.w	r1, r4, r1
 8007416:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800741a:	fa44 f202 	asrne.w	r2, r4, r2
 800741e:	ea41 0402 	orrne.w	r4, r1, r2
 8007422:	e7cd      	b.n	80073c0 <rint+0xa8>
 8007424:	080075b0 	.word	0x080075b0
 8007428:	000fffff 	.word	0x000fffff
 800742c:	00000000 	.word	0x00000000

08007430 <scalbn>:
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	ec55 4b10 	vmov	r4, r5, d0
 8007436:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800743a:	4606      	mov	r6, r0
 800743c:	462b      	mov	r3, r5
 800743e:	b99a      	cbnz	r2, 8007468 <scalbn+0x38>
 8007440:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007444:	4323      	orrs	r3, r4
 8007446:	d036      	beq.n	80074b6 <scalbn+0x86>
 8007448:	4b39      	ldr	r3, [pc, #228]	; (8007530 <scalbn+0x100>)
 800744a:	4629      	mov	r1, r5
 800744c:	ee10 0a10 	vmov	r0, s0
 8007450:	2200      	movs	r2, #0
 8007452:	f7f9 f87d 	bl	8000550 <__aeabi_dmul>
 8007456:	4b37      	ldr	r3, [pc, #220]	; (8007534 <scalbn+0x104>)
 8007458:	429e      	cmp	r6, r3
 800745a:	4604      	mov	r4, r0
 800745c:	460d      	mov	r5, r1
 800745e:	da10      	bge.n	8007482 <scalbn+0x52>
 8007460:	a32b      	add	r3, pc, #172	; (adr r3, 8007510 <scalbn+0xe0>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	e03a      	b.n	80074de <scalbn+0xae>
 8007468:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800746c:	428a      	cmp	r2, r1
 800746e:	d10c      	bne.n	800748a <scalbn+0x5a>
 8007470:	ee10 2a10 	vmov	r2, s0
 8007474:	4620      	mov	r0, r4
 8007476:	4629      	mov	r1, r5
 8007478:	f7f8 feb4 	bl	80001e4 <__adddf3>
 800747c:	4604      	mov	r4, r0
 800747e:	460d      	mov	r5, r1
 8007480:	e019      	b.n	80074b6 <scalbn+0x86>
 8007482:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007486:	460b      	mov	r3, r1
 8007488:	3a36      	subs	r2, #54	; 0x36
 800748a:	4432      	add	r2, r6
 800748c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007490:	428a      	cmp	r2, r1
 8007492:	dd08      	ble.n	80074a6 <scalbn+0x76>
 8007494:	2d00      	cmp	r5, #0
 8007496:	a120      	add	r1, pc, #128	; (adr r1, 8007518 <scalbn+0xe8>)
 8007498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800749c:	da1c      	bge.n	80074d8 <scalbn+0xa8>
 800749e:	a120      	add	r1, pc, #128	; (adr r1, 8007520 <scalbn+0xf0>)
 80074a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074a4:	e018      	b.n	80074d8 <scalbn+0xa8>
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	dd08      	ble.n	80074bc <scalbn+0x8c>
 80074aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80074b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074b6:	ec45 4b10 	vmov	d0, r4, r5
 80074ba:	bd70      	pop	{r4, r5, r6, pc}
 80074bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80074c0:	da19      	bge.n	80074f6 <scalbn+0xc6>
 80074c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80074c6:	429e      	cmp	r6, r3
 80074c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80074cc:	dd0a      	ble.n	80074e4 <scalbn+0xb4>
 80074ce:	a112      	add	r1, pc, #72	; (adr r1, 8007518 <scalbn+0xe8>)
 80074d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e2      	bne.n	800749e <scalbn+0x6e>
 80074d8:	a30f      	add	r3, pc, #60	; (adr r3, 8007518 <scalbn+0xe8>)
 80074da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074de:	f7f9 f837 	bl	8000550 <__aeabi_dmul>
 80074e2:	e7cb      	b.n	800747c <scalbn+0x4c>
 80074e4:	a10a      	add	r1, pc, #40	; (adr r1, 8007510 <scalbn+0xe0>)
 80074e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0b8      	beq.n	8007460 <scalbn+0x30>
 80074ee:	a10e      	add	r1, pc, #56	; (adr r1, 8007528 <scalbn+0xf8>)
 80074f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f4:	e7b4      	b.n	8007460 <scalbn+0x30>
 80074f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80074fa:	3236      	adds	r2, #54	; 0x36
 80074fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007500:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007504:	4620      	mov	r0, r4
 8007506:	4b0c      	ldr	r3, [pc, #48]	; (8007538 <scalbn+0x108>)
 8007508:	2200      	movs	r2, #0
 800750a:	e7e8      	b.n	80074de <scalbn+0xae>
 800750c:	f3af 8000 	nop.w
 8007510:	c2f8f359 	.word	0xc2f8f359
 8007514:	01a56e1f 	.word	0x01a56e1f
 8007518:	8800759c 	.word	0x8800759c
 800751c:	7e37e43c 	.word	0x7e37e43c
 8007520:	8800759c 	.word	0x8800759c
 8007524:	fe37e43c 	.word	0xfe37e43c
 8007528:	c2f8f359 	.word	0xc2f8f359
 800752c:	81a56e1f 	.word	0x81a56e1f
 8007530:	43500000 	.word	0x43500000
 8007534:	ffff3cb0 	.word	0xffff3cb0
 8007538:	3c900000 	.word	0x3c900000

0800753c <_init>:
 800753c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753e:	bf00      	nop
 8007540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007542:	bc08      	pop	{r3}
 8007544:	469e      	mov	lr, r3
 8007546:	4770      	bx	lr

08007548 <_fini>:
 8007548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754a:	bf00      	nop
 800754c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800754e:	bc08      	pop	{r3}
 8007550:	469e      	mov	lr, r3
 8007552:	4770      	bx	lr
